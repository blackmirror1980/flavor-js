{"version":3,"file":"flavor.min.js","sources":["../src/Core/Polyfills/Object.js","../src/Helpers/Primitives/typeChecking.js","../src/Helpers/Primitives/errorHandlers.js","../src/Core/Polyfills/Array.js","../src/Core/Polyfills/String.js","../src/Extensions/Object/index.js","../src/Extensions/Object/prototype.js","../src/Extensions/Object/native.js","../src/Extensions/Function/index.js","../src/Extensions/Function/prototype.js","../src/Extensions/Function/native.js","../src/Extensions/Boolean/index.js","../src/Extensions/Boolean/prototype.js","../src/Extensions/Boolean/native.js","../src/Extensions/Number/index.js","../src/Extensions/Number/prototype.js","../src/Extensions/Number/native.js","../src/Extensions/Date/index.js","../src/Extensions/Date/prototype.js","../src/Extensions/Date/native.js","../src/Extensions/String/index.js","../src/Extensions/String/prototype.js","../src/Extensions/String/native.js","../src/Extensions/RegExp/index.js","../src/Extensions/RegExp/prototype.js","../src/Extensions/RegExp/native.js","../src/Extensions/Array/index.js","../src/Extensions/Array/prototype.js","../src/Extensions/Array/native.js","../src/Extensions/Collection/prototype.js","../src/Extensions/Collection/index.js","../src/Extensions/index.js","../src/Extensions/Collection/native.js","../src/Flavor.js"],"sourcesContent":["/* eslint-disable prefer-destructuring */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-bitwise */\nif (!Object.entries) {\n  Object.defineProperty(Object, 'entries', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value(obj) {\n      const ownProps = Object.keys(obj);\n      let i = ownProps.length;\n      const resArray = new Array(i); // preallocate the Array\n\n      while (i--) {\n        resArray[i] = [ownProps[i], obj[ownProps[i]]];\n      }\n\n      return resArray;\n    },\n  });\n}\n\nif (!Object.hasOwnProperty('getOwnPropertyDescriptors')) {\n  Object.defineProperty(Object, 'getOwnPropertyDescriptors', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value(obj) {\n      return Reflect.ownKeys(obj).reduce((descriptors, key) => {\n        return Object.defineProperty(descriptors, key, {\n          configurable: true,\n          enumerable: true,\n          writable: true,\n          value: Object.getOwnPropertyDescriptor(obj, key),\n        });\n      }, {});\n    },\n  });\n}\n\nif (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(target, firstSource) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      const to = Object(target);\n\n      for (let i = 1; i < arguments.length; i++) {\n        let nextSource = arguments[i];\n\n        if (nextSource === undefined || nextSource === null) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        const keysArray = Object.keys(Object(nextSource));\n\n        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n          const nextKey = keysArray[nextIndex];\n          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n          if (desc !== undefined && desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n\n      return to;\n    },\n  });\n}\n\nfunction convertToDescriptor(descriptor) {\n  if (typeof descriptor !== 'object' || descriptor === null) {\n    throw new TypeError('desc is not a valid property descriptor');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'enumerable')) {\n    descriptor.enumerable = !!descriptor.enumerable;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'configurable')) {\n    descriptor.configurable = !!descriptor.configurable;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'writable')) {\n    descriptor.writable = !!descriptor.writable;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'get')) {\n    const getter = descriptor.get;\n\n    if (typeof getter !== 'function' && typeof getter !== 'undefined') {\n      throw new TypeError(`${getter} is not a valid getter`);\n    }\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'set')) {\n    const setter = descriptor.set;\n\n    if (typeof setter !== 'function' && typeof setter !== 'undefined') {\n      throw new TypeError(`${setter} is not a valid setter`);\n    }\n  }\n\n  if (('get' in descriptor || 'set' in descriptor) && ('value' in descriptor || 'writable' in descriptor)) {\n    throw new TypeError('descriptor is not valid due to getter/setter presence along value/writable presence');\n  }\n\n  return descriptor;\n}\n\nif (!Object.defineProperties) {\n  Object.defineProperty(Object, 'defineProperties', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(obj, properties) {\n      if (typeof obj !== 'object' || obj === null) {\n        throw new TypeError('obj is not an object');\n      }\n\n      properties = Object(properties);\n\n      Object.entries(properties).forEach((property) => {\n        Object.defineProperty(obj, property[0], convertToDescriptor(property[1]));\n      });\n\n      return obj;\n    },\n  });\n}\n\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nif (!Object.keys) {\n  Object.keys = (function () {\n    const hasOwnProperty = Object.prototype.hasOwnProperty;\n    const hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString');\n    const dontEnums = [\n      'toString',\n      'toLocaleString',\n      'valueOf',\n      'hasOwnProperty',\n      'isPrototypeOf',\n      'propertyIsEnumerable',\n      'constructor',\n    ];\n    const dontEnumsLength = dontEnums.length;\n\n    return function (obj) {\n      if (typeof obj !== 'function' && (typeof obj !== 'object' || obj === null)) {\n        throw new TypeError('Object.keys called on non-object');\n      }\n\n      const result = [];\n      let prop;\n      let i;\n\n      // eslint-disable-next-line no-restricted-syntax\n      for (prop in obj) {\n        if (hasOwnProperty.call(obj, prop)) {\n          result.push(prop);\n        }\n      }\n\n      if (hasDontEnumBug) {\n        for (i = 0; i < dontEnumsLength; i++) {\n          if (hasOwnProperty.call(obj, dontEnums[i])) {\n            result.push(dontEnums[i]);\n          }\n        }\n      }\n      return result;\n    };\n  }());\n}\n","// THANKS TO https://gomakethings.com/true-type-checking-with-vanilla-js/\nfunction trueTypeOf(obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();\n}\n\nfunction isNull(any) {\n  return trueTypeOf(any) === 'null';\n}\n\nfunction isUndefined(any) {\n  return trueTypeOf(any) === 'undefined';\n}\n\nfunction isNullOrUndefined(any) {\n  return isNull(any) || isUndefined(any);\n}\n\nfunction isObject(any) {\n  return trueTypeOf(any) === 'object';\n}\n\nfunction isFunction(any) {\n  return trueTypeOf(any) === 'function';\n}\n\nfunction isBoolean(any) {\n  return trueTypeOf(any) === 'boolean';\n}\n\nfunction isNumber(any) {\n  return trueTypeOf(any) === 'number';\n}\n\nfunction isDate(any) {\n  return trueTypeOf(any) === 'date';\n}\n\nfunction isString(any) {\n  return trueTypeOf(any) === 'string';\n}\n\nfunction isRegExp(any) {\n  return trueTypeOf(any) === 'regexp';\n}\n\nfunction isArray(any) {\n  return trueTypeOf(any) === 'array';\n}\n\nexport {\n  trueTypeOf,\n  isNull,\n  isUndefined,\n  isNullOrUndefined,\n  isObject,\n  isFunction,\n  isBoolean,\n  isNumber,\n  isDate,\n  isString,\n  isRegExp,\n  isArray,\n};\n\nexport default {\n  trueTypeOf,\n  isNull,\n  isUndefined,\n  isNullOrUndefined,\n  isObject,\n  isFunction,\n  isBoolean,\n  isNumber,\n  isDate,\n  isString,\n  isRegExp,\n  isArray,\n};\n","import {\n  isObject,\n  isFunction,\n  isBoolean,\n  isNumber,\n  isDate,\n  isString,\n  isRegExp,\n  isArray,\n} from './typeChecking';\n\nfunction objectErrorHandler(...objs) {\n  [...objs].forEach((obj) => {\n    if (!isObject(obj)) {\n      throw new Error(`${obj} is not an object`);\n    }\n  });\n}\n\nfunction functionErrorHandler(...fns) {\n  [...fns].forEach((fn) => {\n    if (!isFunction(fn)) {\n      throw new Error(`${fn} is not a function`);\n    }\n  });\n}\n\nfunction booleanErrorHandler(...blns) {\n  [...blns].forEach((bln) => {\n    if (!isBoolean(bln)) {\n      throw new Error(`${bln} is not a boolean`);\n    }\n  });\n}\n\nfunction numberErrorHandler(...nbrs) {\n  [...nbrs].forEach((nbr) => {\n    if (!isNumber(nbr)) {\n      throw new Error(`${nbr} is not a number`);\n    }\n  });\n}\n\nfunction dateErrorHandler(...dts) {\n  [...dts].forEach((dt) => {\n    if (!isDate(dt)) {\n      throw new Error(`${dt} is not a date`);\n    }\n  });\n}\n\nfunction stringErrorHandler(...strs) {\n  [...strs].forEach((str) => {\n    if (!isString(str)) {\n      throw new Error(`${str} is not a string`);\n    }\n  });\n}\n\nfunction regexpErrorHandler(...regExps) {\n  [...regExps].forEach((regExp) => {\n    if (!isRegExp(regExp)) {\n      throw new Error(`${regExp} is not a regExp`);\n    }\n  });\n}\n\nfunction arrayErrorHandler(...arrs) {\n  [...arrs].forEach((arr) => {\n    if (!isArray(arr)) {\n      throw new Error(`${arr} is not an array`);\n    }\n  });\n}\n\nexport {\n  objectErrorHandler,\n  functionErrorHandler,\n  booleanErrorHandler,\n  numberErrorHandler,\n  dateErrorHandler,\n  stringErrorHandler,\n  regexpErrorHandler,\n  arrayErrorHandler,\n};\n\nexport default {\n  objectErrorHandler,\n  functionErrorHandler,\n  booleanErrorHandler,\n  numberErrorHandler,\n  dateErrorHandler,\n  stringErrorHandler,\n  regexpErrorHandler,\n  arrayErrorHandler,\n};\n","import { trueTypeOf } from '../../Helpers/index';\n\n/* eslint-disable prefer-destructuring */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-bitwise */\n/**\n * Array.isArray() polyfill\n */\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nif (!Array.isArray) {\n  Object.defineProperty(Array, 'isArray', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(arr) {\n      return trueTypeOf(arr) === 'array';\n    },\n  });\n}\n\nif (!Array.prototype.filter) {\n  Object.defineProperty(Array.prototype, 'filter', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(f) {\n      if (this === undefined || this === null) {\n        throw new TypeError();\n      }\n\n      const t = Object(this);\n      const len = t.length >>> 0;\n\n      if (typeof fun !== 'function') {\n        throw new TypeError();\n      }\n\n      const res = [];\n      const thisArg = arguments.length >= 2 ? arguments[1] : undefined;\n\n      let val = null;\n\n      for (let i = 0; i < len; i++) {\n        if (i in t) {\n          val = t[i];\n\n          // NOTE: Technically this should Object.defineProperty at\n          //       the next index, as push can be affected by\n          //       properties on Object.prototype and Array.prototype.\n          //       But that method's new, and collisions should be\n          //       rare, so use the more-compatible alternative.\n          if (f.call(thisArg, val, i, t)) {\n            res.push(val);\n          }\n        }\n      }\n\n      return res;\n    },\n  });\n}\n\nif (!Array.prototype.map) {\n  Object.defineProperty(Array.prototype, 'map', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(arr, iterator) {\n      const result = [];\n\n      for (let i = 0; i < arr.length; i += 1) {\n        result.push(iterator(arr[i]));\n      }\n\n      return result;\n    },\n  });\n}\n\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      const o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      const len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      const n = fromIndex | 0;\n\n      // 5. If n ≥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      let k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        }\n\n        // c. Increase k by 1.\n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    },\n  });\n}\n\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      const o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      const len = o.length >>> 0;\n\n      // Steps 3, 4, 5, 6, 7\n      let k = 0;\n      let value;\n\n      if (arguments.length === 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++;\n        }\n\n        // 3. If len is 0 and initialValue is not present, throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i. Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(callbackfn, undefined, « accumulator, kValue, k, O »).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    },\n  });\n}\n\nif (!Array.prototype.every) {\n  Object.defineProperty(Array.prototype, 'every', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(callbackfn, thisArg) {\n      let T;\n      let k;\n\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      // 1. Let O be the result of calling ToObject passing the this\n      //    value as the argument.\n      const O = Object(this);\n\n      // 2. Let lenValue be the result of calling the Get internal method\n      //    of O with the argument \"length\".\n      // 3. Let len be ToUint32(lenValue).\n      const len = O.length >>> 0;\n\n      // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n      if (typeof callbackfn !== 'function') {\n        throw new TypeError();\n      }\n\n      // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n      if (arguments.length > 1) {\n        T = thisArg;\n      }\n\n      // 6. Let k be 0.\n      k = 0;\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        let kValue;\n\n        // a. Let Pk be ToString(k).\n        //   This is implicit for LHS operands of the in operator\n        // b. Let kPresent be the result of calling the HasProperty internal\n        //    method of O with argument Pk.\n        //   This step can be combined with c\n        // c. If kPresent is true, then\n        if (k in O) {\n          // i. Let kValue be the result of calling the Get internal method\n          //    of O with argument Pk.\n          kValue = O[k];\n\n          // ii. Let testResult be the result of calling the Call internal method\n          //     of callbackfn with T as the this value and argument list\n          //     containing kValue, k, and O.\n          const testResult = callbackfn.call(T, kValue, k, O);\n\n          // iii. If ToBoolean(testResult) is false, return false.\n          if (!testResult) {\n            return false;\n          }\n        }\n\n        k++;\n      }\n\n      return true;\n    },\n  });\n}\n\n// Production steps of ECMA-262, Edition 5, 15.4.4.18\n// Reference: http://es5.github.io/#x15.4.4.18\nif (!Array.prototype.forEach) {\n  Object.defineProperty(Array.prototype, 'forEach', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(callback /*, thisArg*/) {\n      let T;\n      let k;\n\n      if (this == null) {\n        throw new TypeError('this is null or not defined');\n      }\n\n      // 1. Let O be the result of calling toObject() passing the\n      // |this| value as the argument.\n      const O = Object(this);\n\n      // 2. Let lenValue be the result of calling the Get() internal\n      // method of O with the argument \"length\".\n      // 3. Let len be toUint32(lenValue).\n      const len = O.length >>> 0;\n\n      // 4. If isCallable(callback) is false, throw a TypeError exception.\n      // See: http://es5.github.com/#x9.11\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      // 5. If thisArg was supplied, let T be thisArg; else let\n      // T be undefined.\n      if (arguments.length > 1) {\n        T = arguments[1];\n      }\n\n      // 6. Let k be 0.\n      k = 0;\n\n      // 7. Repeat while k < len.\n      while (k < len) {\n        let kValue;\n\n        // a. Let Pk be ToString(k).\n        //    This is implicit for LHS operands of the in operator.\n        // b. Let kPresent be the result of calling the HasProperty\n        //    internal method of O with argument Pk.\n        //    This step can be combined with c.\n        // c. If kPresent is true, then\n        if (k in O) {\n          // i. Let kValue be the result of calling the Get internal\n          // method of O with argument Pk.\n          kValue = O[k];\n\n          // ii. Call the Call internal method of callback with T as\n          // the this value and argument list containing kValue, k, and O.\n          callback.call(T, kValue, k, O);\n        }\n        // d. Increase k by 1.\n        k++;\n      }\n      // 8. return undefined.\n    },\n  });\n}\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-bitwise */\nif (!String.prototype.includes) {\n  Object.defineProperty(String.prototype, 'includes', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(search, start) {\n      start = (typeof start !== 'number') ? 0 : start;\n\n      if (start + search.length > this.length) {\n        return false;\n      }\n\n      return this.indexOf(search, start) !== -1;\n    },\n  });\n}\n\nif (!String.prototype.toCamelCase) {\n  Object.defineProperty(String.prototype, 'toCamelCase', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value() {\n      const s = this && this.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g).map((x) => {\n        return x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase();\n      }).join('');\n\n      return s.slice(0, 1).toLowerCase() + s.slice(1);\n    },\n  });\n}\n\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nif (!String.prototype.padStart) {\n  Object.defineProperty(String.prototype, 'padStart', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(targetLength, padString) {\n      targetLength >>= 0; //truncate if number, or convert non-number to 0;\n      padString = String(typeof padString !== 'undefined' ? padString : ' ');\n\n      if (this.length >= targetLength) {\n        return String(this);\n      }\n\n      targetLength -= this.length;\n\n      if (targetLength > padString.length) {\n        padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n      }\n\n      return padString.slice(0, targetLength) + String(this);\n    },\n  });\n}\n\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\nif (!String.prototype.padEnd) {\n  Object.defineProperty(String.prototype, 'padEnd', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(targetLength, padString) {\n      targetLength >>= 0; //floor if number or convert non-number to 0;\n      padString = String((typeof padString !== 'undefined' ? padString : ' '));\n\n      if (this.length > targetLength) {\n        return String(this);\n      }\n\n      targetLength -= this.length;\n\n      if (targetLength > padString.length) {\n        padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n      }\n\n      return String(this) + padString.slice(0, targetLength);\n    },\n  });\n}\n","/**\n * @namespace object\n * @description extensions for the JS primitive Object\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import {\n  isUndefined, isRequired, isString, isArray, isObject, objectErrorHandler,\n} from '../../Helpers/index';\n\n/**\n * @namespace object\n * @description extensions for the JS primitive Object\n */\nexport default {\n  forEach: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(iteratee, scope) {\n      objectErrorHandler(this);\n\n      scope = scope || window;\n\n      Object.keys(this).forEach((key) => {\n        iteratee.call(scope, this[key], key, this);\n      });\n\n      return this;\n    },\n  },\n  clone: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value() {\n      objectErrorHandler(this);\n\n      const clone = {};\n\n      Object.keys(this).forEach((key) => {\n        if (isObject(this[key])) {\n          clone[key] = this[key].clone();\n        } else {\n          clone[key] = this[key];\n        }\n      });\n\n      return clone;\n    },\n  },\n  merge: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(...objs) {\n      objectErrorHandler(this, ...objs);\n\n      const mergeObj = [this, ...objs].reduce((acc, obj) => Object.keys(obj).reduce((a, k) => {\n        if (acc.hasOwnProperty(k)) {\n          if (isArray(acc[k])) {\n            acc[k] = [].concat(acc[k], obj[k]);\n          } else if (isObject(acc[k]) && Object.keys(acc[k]).length > 0 && isObject(obj[k]) && Object.keys(obj[k]).length > 0) {\n            acc[k].merge(obj[k]);\n          } else {\n            acc[k] = obj[k];\n          }\n        } else {\n          acc[k] = obj[k];\n        }\n\n        return acc;\n      }, {}), {});\n\n      return Object.assign(this, mergeObj);\n    },\n  },\n  hasOwnPropertyDeep: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(path) {\n      objectErrorHandler(this);\n\n      /**\n       * Checks if the element exists in an array\n       * @param   {Object}  obj The object to check\n       * @param   {String}  prop   The property that should be an array\n       * @param   {Number}  index  The array index to check on object.prop\n       * @returns {Boolean} Returns true if element in array on object.prop is defined\n       */\n      function hasArray(obj, prop, index) {\n        return obj.hasOwnProperty(prop) && (isArray(obj[prop]) || isObject(obj[prop])) && !isUndefined(obj[prop][index]);\n      }\n\n      function hasOwnPropertyDeepTest(obj, props) {\n        if (props.length === 0) {\n          return obj;\n        }\n\n        let prop = props.shift();\n        let arrIndex = null;\n        const propHasArrayIndex = prop.match(/(.+?)\\[(\\d+?|[\\\\?'\"].+?[\\\\?'\"])\\]$/);\n\n        if (propHasArrayIndex !== null) {\n          [prop, arrIndex] = propHasArrayIndex;\n\n          arrIndex = arrIndex.replace(/[\\\\\"']/g, '');\n\n          if (hasArray(obj, prop, arrIndex)) {\n            return hasOwnPropertyDeepTest(obj[prop][arrIndex], props);\n          }\n        } else if (obj.hasOwnProperty(prop)) {\n          return hasOwnPropertyDeepTest(obj[prop], props);\n        }\n\n        return undefined;\n      }\n\n      if (!isObject(this)) {\n        throw new Error('Invalid object: ', this);\n      }\n\n      if (!isString(path)) {\n        throw new Error('Invalid path: ', path);\n      }\n\n      const brackets = ('root.' + path).match(/\\.[^\\.]+?\\[(\\d+?|[\\\\?'\"].+?[\\\\?'\"])\\]/g);\n\n      if (!brackets) {\n        return hasOwnPropertyDeepTest(this, path.split('.'));\n      }\n\n      const sanitized = brackets.map((part) => {\n        return part.replace(/^\\./, '');\n      }).reduce((obj, part) => {\n        // no symbols yet\n        const key = Math.floor(Math.random() * 1E10);\n\n        obj.parts[key] = part;\n        obj.path = obj.path.replace(part, key);\n\n        return obj;\n      }, {\n        path,\n        parts: {},\n      });\n\n      const parts = sanitized.path.split('.').map((part) => {\n        if (sanitized.parts[part]) {\n          return sanitized.parts[part];\n        }\n\n        return part;\n      });\n\n      return hasOwnPropertyDeepTest(this, parts);\n    },\n  },\n  omit: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(...paths) {\n      objectErrorHandler(this);\n\n      let clone = this.clone();\n\n      function unsetPath(obj, path) {\n        if (!isObject(obj)) {\n          throw new TypeError('expected an object.');\n        }\n\n        if (obj.hasOwnProperty(path)) {\n          delete obj[path];\n          return true;\n        }\n\n        if (obj.hasOwnPropertyDeep(path)) {\n          const segs = path.split('.');\n          let last = segs.pop();\n\n          while (segs.length && segs[segs.length - 1].slice(-1) === '\\\\') {\n            last = segs.pop().slice(0, -1) + '.' + last;\n          }\n\n          while (segs.length) {\n            obj = obj[path = segs.shift()];\n          }\n\n          return (delete obj[last]);\n        }\n\n        return true;\n      }\n\n      function omitDeep(obj, path) {\n        if (isUndefined(obj)) {\n          return {};\n        }\n\n        if (isArray(obj)) {\n          for (let i = 0; i < obj.length; i++) {\n            obj[i] = omitDeep(obj[i], path);\n          }\n          return obj;\n        }\n\n        if (!isObject(obj)) {\n          return obj;\n        }\n\n        if (!isString(path)) {\n          return obj;\n        }\n\n        unsetPath(obj, path);\n\n        return obj;\n      }\n\n      [...paths].forEach((path) => {\n        clone = omitDeep(clone, path);\n      });\n\n      return clone;\n    },\n  },\n  pick: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(...props) {\n      objectErrorHandler(this);\n\n      return props.reduce((acc, prop) => {\n        if (this.hasOwnProperty(prop)) {\n          acc[prop] = this[prop];\n        }\n\n        return acc;\n      }, {});\n    },\n  },\n  path: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(...selectors) {\n      objectErrorHandler(this);\n\n      const values = [...selectors].map((selector) => {\n        return selector.replace(/\\[([^\\[\\]]*)\\]/g, '.$1.').split('.').filter((t) => {\n          return t !== '';\n        }).reduce((prev, cur) => {\n          return prev && prev[cur];\n        }, this);\n      });\n\n      if (values.length === 1) {\n        return values[0];\n      }\n\n      return values;\n    },\n  },\n};\n","import { isObject } from '../../Helpers/index';\n\n/**\n * @namespace object\n * @description extensions for the JS primitive Object\n */\nexport default {\n  /**\n   * checks if something is an object\n   * @example <caption>eg. usage</caption>\n   * var o = {\n   *   prop1: 1,\n   *   prop2: 'a',\n   * };\n   *\n   * console.log(Object.isObject(o)); // true\n   *\n   * console.log(Object.isObject(2)); // false\n   *\n   * console.log(Object.isObject('2')); // false\n   *\n   * console.log(Object.isObject(null)); // false\n   * @memberOf object\n   * @method isObject\n   * @instance\n   * @param {object} obj - the object\n   * @return {boolean}\n   */\n  isObject: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(obj) {\n      return isObject(obj);\n    },\n  },\n  /**\n   * executes function for every property in the object<br><br>\n   * @example <caption>eg. usage</caption>\n   * var o = {\n   *   prop1: 1,\n   *   prop2: 'a',\n   *   prop3: 'b',\n   *   prop4: new Date(),\n   * };\n   *\n   * o.forEach(function(value, key) {\n   *   console.log(key, value);\n   * });\n   *\n   * // it logs\n   * 'prop1', 1\n   * 'prop2', 'a'\n   * 'prop3', 'b'\n   * 'prop4', Date\n   * @memberOf object\n   * @method forEach\n   * @instance\n   * @param {object} obj - the object\n   * @param {function} iteratee - the iteratee callback will be invoked with the following parameters<br>\n   * so your callback has to be something like this<br><br>\n   * <pre>\n   * function iteratee(value, key) {}\n   * </pre>\n   * @param {any} iteratee.value - the property value of the object\n   * @param {string} iteratee.key - the property key of the object\n   * @param {object} scope [window] - the scope to use for calling the iteratee, defaulted to window object\n   * @return {object} to make chainable the method\n   */\n  forEach: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(obj, iteratee, scope) {\n      return Object.prototype.forEach.call(obj, iteratee, scope);\n    },\n  },\n  /**\n   * deeply clones an object in a new object<br><br>\n   * @example <caption>eg. usage</caption>\n   * var o = {\n   *   prop1: 1,\n   *   prop2: 'a',\n   * };\n   *\n   * var p = o.clone();\n   *\n   * console.log(o == p); // true\n   *\n   * console.log(o === p); // false\n   * @memberOf object\n   * @method clone\n   * @instance\n   * @param {object} obj - the object\n   * @return {object}\n   */\n  clone: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(obj) {\n      return Object.prototype.clone.call(obj);\n    },\n  },\n  /**\n   * deep merges a variable list of objects inside this object instance or a new object (useful to implements defaults/options/settings pattern or set multiple properties at the same time or what you want ;-)<br><br>\n   * @example <caption>eg. usage</caption>\n   * var o = {\n   *   prop1: 1,\n   *   prop2: 'a',\n   * };\n   *\n   * o.merge({\n   *   prop1: 2,\n   *   prop3: new Date(),\n   *   prop5: {\n   *     prop1: new Date(),\n   *   }\n   * }, {\n   *   prop4: 7.52,\n   *   prop5: {\n   *     prop2: 'merged',\n   *   }\n   * });\n   *\n   * console.log(o); // { prop1: 2, prop2: 'a', prop3: Date, prop4: 7.52, prop5: { prop1: Date, prop2: 'merged' } }\n   * @memberOf object\n   * @method inherit\n   * @instance\n   * @param {object} obj - the object to extend\n   * @param {...object} objs - the list of objects to merge\n   * @return {object}\n   */\n  merge: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(obj, ...objs) {\n      return Object.prototype.merge.call(obj, ...objs);\n    },\n  },\n  /**\n   * returns a new object that omits the specified properties<br><br>\n   * @example <caption>eg. usage</caption>\n   * var o = {\n   *   prop1: 1,\n   *   prop2: 'a',\n   * };\n   *\n   * o.merge({\n   *   prop1: 2,\n   *   prop3: new Date(),\n   *   prop5: {\n   *     prop1: new Date(),\n   *   }\n   * }, {\n   *   prop4: 7.52,\n   *   prop5: {\n   *     prop2: 'merged',\n   *   }\n   * });\n   *\n   * console.log(o); // { prop1: 2, prop2: 'a', prop3: Date, prop4: 7.52, prop5: { prop1: Date, prop2: 'merged' } }\n   *\n   * console.log(o.omit('prop1')); // { prop2: 'a', prop3: Date, prop4: 7.52, prop5: { prop1: Date, prop2: 'merged' } }\n   *\n   * console.log(o.omit('prop1', 'prop2')); // { prop3: Date, prop4: 7.52, prop5: { prop1: Date, prop2: 'merged' } }\n   *\n   * console.log(o.omit(['prop1', 'prop2'])); // { prop3: Date, prop4: 7.52, prop5: { prop1: Date, prop2: 'merged' } }\n   *\n   * console.log(o.omit('prop1', 'prop5.prop1'])); // { prop2: 'a', prop3: Date, prop4: 7.52, prop5: { prop2: 'merged' } }\n   * @memberOf object\n   * @method omit\n   * @instance\n   * @param {object} obj - the object\n   * @param {...string} props - the list of properties to omit\n   * @return {object}\n   */\n  omit: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(obj, ...props) {\n      return Object.prototype.omit.call(obj, ...props);\n    },\n  },\n  /**\n   * returns a new object that picks only the specified properties<br><br>\n   * @example <caption>eg. usage</caption>\n   * var o = {\n   *   prop1: 1,\n   *   prop2: 'a',\n   * };\n   *\n   * o.inherit({\n   *   prop1: 2,\n   *   prop3: new Date(),\n   * }, {\n   *   prop4: 7.52,\n   * });\n   *\n   * console.log(o); // o = {prop1: 2, prop2: 'a', prop3: Date, prop4: 7.52}\n   *\n   * console.log(o.pick('prop1')); // {prop1: 2}\n   *\n   * console.log(o.pick('prop1', 'prop2')); // {prop1: 2, prop2: 'a'}\n   *\n   * console.log(o.pick(['prop1', 'prop2'])); // {prop1: 2, prop2: 'a'}\n   *\n   * console.log(o.pick(['prop1'], ['prop2'])); // {prop1: 2, prop2: 'a'}\n   *\n   * console.log(o); // o = {prop1: 2, prop2: 'a', prop3: Date, prop4: 7.52}\n   * @memberOf object\n   * @method pick\n   * @instance\n   * @param {object} obj - the object\n   * @param {...string} props - the list of properties to omit\n   * @return {*}\n   */\n  pick: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(obj, ...props) {\n      return Object.prototype.pick.call(obj, ...props);\n    },\n  },\n  /**\n   * returns the value at the specified path of the object, with a default value<br><br>\n   * @example <caption>eg. usage</caption>\n   * var o = {\n    *   prop1: 1,\n    *   prop2: 'a',\n    *   prop3: {\n    *     prop31: 2.52,\n    *     prop32: 'b',\n    *   },\n    *   prop4: new Date(),\n    * };\n    *\n    * console.log(o.path('prop1')); // 1\n    *\n    * console.log(o.path('prop3.prop31')); // 2.52\n    *\n    * console.log(o.path('prop3.prop34')); // null\n    *\n    * console.log(o.path('prop3.prop34', 'c')); // c\n    * @example <caption>you can also use array paths</caption>\n    * var o = {\n    *   prop1: 1,\n    *   prop2: 'a',\n    *   prop3: {\n    *     prop31: 2.52,\n    *     prop32: [{\n    *       propO1: 'b',\n    *     }, {\n    *       propO1: 'c',\n    *     }],\n    *   },\n    *   prop4: new Date(),\n    * };\n    *\n    * console.log(o.path('prop3.prop32[0].propO1')); // 'b'\n    *\n    * console.log(o.path('prop3.prop32[1]')); // {propO1: 'c'}\n    *\n    * console.log(o.path('prop3.prop31[2]')); // null\n    *\n    * console.log(o.path('prop3.prop31[2]', {})); // {}\n    * @memberOf object\n    * @method path\n    * @instance\n    * @param {object} obj - the object\n    * @param {...string} selectors - the path to search inside the object\n    * @param {object} [def=null] - the default value to return if path is not found\n    * @return {array|any}\n    */\n  path: {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(obj, ...selectors) {\n      return Object.prototype.path.call(obj, ...selectors);\n    },\n  },\n};\n","/**\n * @namespace function\n * @description extensions for the JS primitive Function\n */\n\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import { isRequired, isFunction, functionErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace function\n * @description extensions for the JS primitive Function\n */\nexport default {\n  isAsyncFunction: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      return this.constructor.name === 'AsyncFunction';\n    },\n  },\n  proxy: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(scope, ...proxyArgs) {\n      functionErrorHandler(this);\n\n      const func = this;\n\n      return function (...args) {\n        return func.apply(scope, (proxyArgs.length > 0 ? proxyArgs : args));\n      };\n    },\n  },\n  times: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(times = 0, reverse = false) {\n      functionErrorHandler(this);\n\n      let index = !!reverse ? times + 1 : 0;\n\n      while (reverse ? (--index > 0) : (index++ < times)) {\n        this(index);\n      }\n    },\n  },\n};\n","import { isRequired, isFunction, functionErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace function\n * @description extensions for the JS primitive Function\n */\nexport default {\n  /**\n   * checks if something is a function\n   * @example <caption>eg. usage</caption>\n   * var f = function(){};\n   *\n   * console.log(Function.isFunction(f)); // true\n   *\n   * console.log(Function.isFunction(2)); // false\n   *\n   * console.log(Function.isFunction(function(){})); // true\n   *\n   * console.log(Function.isFunction(null)); // false\n   * @memberOf function\n   * @method isFunction\n   * @instance\n   * @param {function} fn - the function to be checked\n   * @return {boolean}\n   */\n  isFunction: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(fn) {\n      return isFunction(fn);\n    },\n  },\n  /**\n   * checks if a function is an async function\n   * @example <caption>eg. usage</caption>\n   * var f = function(){};\n   * var af = async function(){};\n   *\n   * console.log(Function.isAsyncFunction(f)); // false\n   *\n   * console.log(Function.isAsyncFunction(2)); // false\n   *\n   * console.log(Function.isAsyncFunction(function(){})); // false\n   *\n   * console.log(Function.isAsyncFunction(af); // true\n   *\n   * console.log(Function.isAsyncFunction(null)); // false\n   * @memberOf function\n   * @method isFunction\n   * @instance\n   * @param {function} fn - the function to be checked\n   * @return {boolean}\n   */\n  isAsyncFunction: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(fn) {\n      return isFunction(fn) && Function.prototype.isAsyncFunction.call(this);\n    },\n  },\n  /**\n   * proxies a function with scope and optional arguments<br><br>\n   * @example <caption>eg. usage</caption>\n   * var a = 1;\n   * var b = new Date();\n   * var c = function() {};\n   *\n   * var scope = {\n     *   prop1: 2.53,\n     *   prop2: 'foo';\n     * };\n   *\n   * var fn = function(a, b, c) {\n     *   console.log(this.prop1, a, b, c);\n     * }\n   *\n   * fn(a, b, c);\n   * // it logs\n   * undefined, 1, Date, function()\n   *\n   * var pfn = fn.proxy(scope);\n   * pfn(a, b, c);\n   * // it logs\n   * 2.53, 1, Date, function()\n   *\n   * pfn = fn.proxy(scope, 2, null);\n   * pfn(a, b, c);\n   * // it logs\n   * 2.53, 2, null, function()\n   * @memberOf function\n   * @method proxy\n   * @instance\n   * @param {function} fn - the function to be proxed\n   * @param {object} scope - the scope object (will be `this` inside the function)\n   * @param {...any} args - pass one or more arguments to override the original handled arguments\n   * @return {function}\n   */\n  proxy: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(fn, scope, ...args) {\n      return Function.prototype.proxy.call(fn, scope, ...args);\n    },\n  },\n  /**\n   * repeats a function n times\n   * @example <caption>eg. usage</caption>\n   * Function.times((i) => {\n   *   console.log(i);\n   * }, 5);\n   *\n   * // logs 1, 2, 3, 4, 5\n   * @example <caption>or</caption>\n   * Function.times(function(i) {\n   *   console.log(i);\n   * }, true);\n   *\n   * // logs 5, 4, 3, 2, 1\n   * @memberOf function\n   * @method times\n   * @instance\n   * @param {number} [times=0] - the number of times\n   * @param {function} iteratee - the iteratee function to invoke<br>\n   * the iteratee will be invoked passing the index as i<br>\n   * so the iteratee has to be something like this<br>\n   * <pre>\n   * function(i) {}\n   * </pre>\n   * @param {number} iteratee.i - the index\n   * @param {boolean} [reverse=false] - true if you want to do a times reverse cycle\n   */\n  times: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(iteratee, times = 0, reverse = false) {\n      Function.prototype.times.call(iteratee, times, reverse);\n    },\n  },\n};\n","/**\n * @namespace boolean\n * @description extensions for the JS primitive Boolean\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace boolean\n * @description extensions for the JS primitive Boolean\n */\nexport default {\n};\n","import { isBoolean } from '../../Helpers/index';\n/**\n * @namespace boolean\n * @description extensions for the JS primitive Boolean\n */\nexport default {\n  /**\n   * isBoolean\n   * @example <caption>eg. usage</caption>\n   * var b = true;\n   *\n   * console.log(Boolean.isBoolean(b)); // true\n   *\n   * console.log(Boolean.isBoolean(2)); // false\n   *\n   * console.log(Boolean.isBoolean(false)); // true\n   *\n   * console.log(Boolean.isBoolean(null)); // false\n   * @memberOf boolean\n   * @method isBoolean\n   * @instance\n   * @return {boolean}\n   */\n  isBoolean: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(b) {\n      return isBoolean(b);\n    },\n  },\n  /**\n   * randomizes a boolean value\n   * @example <caption>eg. usage</caption>\n   * console.log(Boolean.random()); // it logs true or false\n   * @memberOf boolean\n   * @method random\n   * @instance\n   * @return {boolean}\n   */\n  random: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      return Math.random() >= 0.5;\n    },\n  },\n};\n","/**\n * @namespace number\n * @description extensions for the JS primitive Number\n */\n\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import { isRequired, isNumber, numberErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace number\n * @description extensions for the JS primitive Number\n */\nexport default {\n  isBetween: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(from = Number.MIN_VALUE, to = Number.MAX_VALUE) {\n      numberErrorHandler(this);\n\n      if (!!to && from > to) {\n        [to, from] = [from, to];\n      }\n\n      return to == null ? this >= 0 && this < from : this >= from && this < to;\n    },\n  },\n};\n","import { isNumber } from '../../Helpers/index';\n\n/**\n * @namespace number\n * @description extensions for the JS primitive Number\n */\nexport default {\n  /**\n   * checked if something is a number\n   * @example <caption>eg. usage</caption>\n   * var f = function(){};\n   *\n   * console.log(Number.isNumber(f)); // false\n   *\n   * console.log(Number.isNumber(2)); // true\n   *\n   * console.log(Number.isNumber(function(){})); // false\n   *\n   * console.log(Number.isNumber(null)); // false\n   * @memberOf number\n   * @method isNumber\n   * @instance\n   * @param {number} n - the number to be checked\n   * @return {boolean}\n   */\n  isNumber: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(n) {\n      return isNumber(n);\n    },\n  },\n  /**\n   * checks if a number is between a range\n   * @example <caption>eg. usage</caption>\n   * console.log((5).between(1, 10)); // true\n   *\n   * console.log((5).between(1, 4)); // false\n   * @memberOf number\n   * @method between\n   * @instance\n   * @param {number} n - the number\n   * @param {number} [from=Number.MIN_VALUE] - the from number\n   * @param {number} [to=Number.MAX_VALUE] - the to number\n   * @return {*|boolean}\n   */\n  isBetween: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(n, from = Number.MIN_VALUE, to = Number.MAX_VALUE) {\n      return Number.prototype.isBetween.call(n, from, to);\n    },\n  },\n  /**\n   * parse a number value, returns null if parsing failes\n   * @example <caption>eg. usage</caption>\n   * console.log(Number.parse(\"1\")); // 1\n   *\n   * console.log(Number.parse(\"1,25\")); // 1.25\n   *\n   * console.log(Number.parse({})); // null\n   * @memberOf number\n   * @method parse\n   * @instance\n   * @param {*} n - the value to be parsed\n   * @param {number} radix [10] - the radix to use for the parsing\n   * @return {number|null}\n   */\n  parse: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(n, radix = 10) {\n      return parseInt(n, radix) || null;\n    },\n  },\n  /**\n   * randomizes a number\n   * @example <caption>eg. usage</caption>\n   * console.log(Number.random(1, 5)); // a number between 1 and 5\n   *\n   * console.log(Number.random(1, 5, true)); // a number between 1.0 and 5.0\n   *\n   * console.log(Number.random()); // a number between Number.MIN_VALUE and Number.MAX_VALUE\n   * @memberOf number\n   * @method random\n   * @instance\n   * @param {number} [lower=Number.MIN_VALUE] - the lower number\n   * @param {number} [upper=Number.MAX_VALUE] - the upper number\n   * @param {boolean} [floating=false] - ask to return a floating number value\n   * @return {number}\n   */\n  random: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(from = Number.MIN_VALUE, to = Number.MAX_VALUE, floating = false) {\n      if (!!to && from > to) {\n        [to, from] = [from, to];\n      }\n\n      if (!!floating) {\n        return Math.floor(Math.random() * (to - from + 1)) + from;\n      }\n\n      return Math.random() * (to - from) + from;\n    },\n  },\n};\n","/**\n * @namespace date\n * @description extensions for the JS primitive Date\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import { isRequired, isDate, dateErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace date\n * @description extensions for the JS primitive Date\n */\nexport default {\n  toTimestamp: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      dateErrorHandler(this);\n\n      return Math.round(this);\n    },\n  },\n};\n","import { isDate } from '../../Helpers/index';\n\n/**\n * @namespace date\n * @description extensions for the JS primitive Date\n */\nexport default {\n  /**\n   * checks if something is a date\n   * @example <caption>eg.usage</caption>\n   * console.log(Date.isDate(new Date())); // true\n   *\n   * console.log(Date.isDate(0)); // false\n   * @memberOf date\n   * @method isDate\n   * @instance\n   * @param {*} d - the value to check\n   * @return {boolean}\n   */\n  isDate: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(d) {\n      return isDate(d);\n    },\n  },\n  /**\n   * returns a random date between specified range (default now <-> now)\n   * @example <caption>eg. usage</caption>\n   * console.log(Date.random()); // Mon Jan 22 2018 14:07:09 GMT+0100 (CET)\n   *\n   * console.log(Date.random(new Date(1970, 0, 1), new Date())); // Sun Apr 05 1987 00:00:00 GMT+0200 (CEST)\n   * @memberOf date\n   * @method random\n   * @instance\n   * @param {date} startDate [null] - the range start date\n   * @param {date} endDate [null] - the range end date\n   * @return {date}\n   */\n  random: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(startDate = null, endDate = null) {\n      if(!startDate && !endDate) {\n        return new Date(new Date().getTime() * Math.random());\n      }\n\n      return new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()));\n    },\n  },\n  /**\n   * transforms a date in a UTC timestamp integer\n   * @example <caption>eg. usage</caption>\n   * console.log((new Date()).toTimestamp()); // 1491317811925 @ 2017-04-4-16:57\n   * @memberOf date\n   * @method toTimestamp\n   * @instance\n   * @param {date} d - the date to convert\n   * @return {timestamp|0}\n   */\n  toTimestamp: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(d) {\n      if (!Date.isDate(d)) {\n        return 0;\n      }\n\n      return Date.prototype.toTimestamp.call(d);\n    },\n  },\n};\n","/**\n * @namespace string\n * @description extensions for the JS primitive String\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import { isRequired, isString, stringErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace string\n * @description extensions for the JS primitive String\n */\nexport default {\n  isPercentage: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      stringErrorHandler(this);\n\n      return new RegExp(/^((\\d{1,2}|100)(?:(\\.|,)\\d{1,4})?)%$/).test(this);\n    },\n  },\n  toInt: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(radix = 10) {\n      stringErrorHandler(this);\n\n      return Number.parseInt(this, radix);\n    },\n  },\n  toFloat: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      stringErrorHandler(this);\n\n      return Number.parseFloat(this);\n    },\n  },\n  pad: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(length = 0, chars = ' ') {\n      stringErrorHandler(this);\n\n      return this.padStart((this.length + length) / 2, chars).padEnd(length, chars);\n    },\n  },\n};\n","import { isString } from '../../Helpers/index';\n\n/**\n * @namespace string\n * @description extensions for the JS primitive String\n */\nexport default {\n  /**\n   * checks if something is a string\n   * @example <caption>eg. usage</caption>\n   * var s = 'foo';\n   *\n   * console.log(String.isString(s)); // true\n   *\n   * console.log(String.isString(2)); // false\n   *\n   * console.log(String.isString('')); // true\n   *\n   * console.log(String.isString(null)); // false\n   * @memberOf string\n   * @method isString\n   * @instance\n   * @param {string} str - the string to be checked\n   * @return {boolean}\n   */\n  isString: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(str) {\n      return isString(str);\n    },\n  },\n  /**\n   * checks if a string is a percentage number between 0 and 100 (inclusive of course ;-) with up to 4 decimal places and comma or dot separated\n   * @example <caption>eg. usage</caption>\n   * console.log(String.isPercentage('50,25%')); // true\n   *\n   * console.log(String.isPercentage('50.25%')); // true\n   *\n   * console.log(String.isPercentage('50.25')); // false\n   *\n   * console.log(String.isPercentage('50.2565%')); // true\n   *\n   * console.log(String.isPercentage('50,2546776545%')); // false\n   *\n   * console.log(String.isPercentage('100%')); // true\n   *\n   * console.log(String.isPercentage('101%')); // false\n   *\n   * console.log(String.isPercentage('0%')); // true\n   *\n   * console.log(String.isPercentage('5')); // false\n   * @memberOf string\n   * @method parsePercentage\n   * @instance\n   * @param {string} str - the string to be checked\n   * @return {boolean}\n   */\n  isPercentage: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(str) {\n      return String.prototype.isPercentage.call(str);\n    },\n  },\n  /**\n   * random GUID generator\n   * @example <caption>eg. usage</caption>\n   * console.log(String.GUID()); // e405cd23-2640-4e31-8b6e-fecc268ca9c7\n   * @memberOf string\n   * @method GUID\n   * @return {string}\n   */\n  GUID: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      // Random GUID generator based on .toString(16);\n      return `${Math.random().toString(16).slice(2, 10)}-${Math.random().toString(16).slice(2, 6)}-4${Math.random().toString(16).slice(2, 5)}-${Math.random().toString(16).slice(2, 6)}-${Math.random().toString(16).slice(2, 14)}`;\n    },\n  },\n  /**\n   * converts a string to an integer number\n   * @example <caption>eg. usage</caption>\n   * console.log(String.toInt('550')); // 550\n   *\n   * console.log('550'.toInt()); // 550\n   *\n   * console.log(String.toInt('550', 6)); // 210\n   *\n   * console.log('550'.toInt(6)); // 210\n   * @memberOf string\n   * @method toInt\n   * @instance\n   * @param {string} str - the string\n   * @param {number} radix [10] - the radix to use for the conversion\n   * @return {number}\n   */\n  toInt: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(str, radix = 10) {\n      if (String.isString(str)) {\n        return String.prototype.toInt.call(str, radix);\n      }\n\n      return str;\n    },\n  },\n  /**\n   * converts a string to an floating number\n   * @example <caption>eg. usage</caption>\n   * console.log(String.toFloat('55.05')); // 55.05\n   *\n   * console.log('55.05'.toFloat()); // 55.05\n   * @memberOf string\n   * @method toFloat\n   * @instance\n   * @param {string} str - the string\n   * @return {number}\n   */\n  toFloat: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(str) {\n      if (String.isString(str)) {\n        return String.prototype.toFloat.call(str);\n      }\n\n      return str;\n    },\n  },\n  /**\n   * pads string on the left and right sides if it's shorter than length. Padding characters are truncated if they can't be evenly divided by length.\n   * @example <caption>eg. usage</caption>\n   * console.log(String.pad('5', 5)); // '  5  '\n   *\n   * console.log(String.pad('5', 5, '0')); // '00500'\n   *\n   * console.log(String.pad(4, 5, '01')); // '01401'\n   *\n   * console.log(String.pad(true, 5, '01')); // '1true'\n   *\n   * console.log(String.pad(4, 5, '01')); // '01401'\n   *\n   * console.log(String.pad(new Date(), 50, '--') // '-----Tue Apr 04 2017 17:54:40 GMT+0000 (CEST)-----'\n   * @memberOf string\n   * @method pad\n   * @instance\n   * @param {string} str - the string to be padded\n   * @param {number} length [0] - the string length you need\n   * @param {string} chars [' '] - the char/chars used to pad the string\n   * @return {string}\n   */\n  pad: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(str, length = 0, chars = ' ') {\n      if (String.isString(str)) {\n        return String.prototype.pad.call(str, length, chars);\n      }\n\n      return str;\n    },\n  },\n};\n","/**\n * @namespace regexp\n * @description extensions for the JS primitive RegExp\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import { isRequired, isRegExp, regexpErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace regexp\n * @description extensions for the JS primitive RegExp\n */\nexport default {\n};\n","import { isRegExp } from '../../Helpers/index';\n\n/**\n * @namespace regexp\n * @description extensions for the JS primitive RegExp\n */\nexport default {\n  /**\n   * checks if something is a RegExp\n   * @example <caption>eg. usage</caption>\n   * var re = /lookforthis/;\n   *\n   * console.log(RegExp.isRegExp(re)); // true\n   *\n   * console.log(RegExp.isRegExp(2)); // false\n   *\n   * console.log(RegExp.isRegExp('')); // true\n   *\n   * console.log(RegExp.isRegExp(null)); // false\n   * @memberOf regexp\n   * @method isRegExp\n   * @instance\n   * @param {regexp} re - the regexp to be checked\n   * @return {boolean}\n   */\n  isRegExp: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(re) {\n      return isRegExp(re);\n    },\n  },\n};\n","/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import { isRequired, isArray, arrayErrorHandler } from '../../Helpers/index';\n\n/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nexport default {\n  clone: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return [...this];\n    },\n  },\n  difference: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr, symmetric = true) {\n      arrayErrorHandler(this, arr);\n\n      if (!!symmetric) {\n        return Array.prototype.unique.call([\n          ...this.filter((item) => {\n            return !arr.includes(item);\n          }),\n          ...arr.filter((item) => {\n            return !this.includes(item);\n          }),\n        ]);\n      }\n\n      return this.filter((item) => {\n        return !arr.includes(item);\n      });\n    },\n  },\n  intersection: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      arrayErrorHandler(this, arr);\n\n      return this.filter((item) => {\n        return arr.includes(item);\n      });\n    },\n  },\n  contains: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(any, all = false) {\n      arrayErrorHandler(this);\n\n      if (Array.isArray(any)) {\n        if (!all) {\n          return Array.prototype.intersection.call(this, any).length > 0;\n        }\n\n        return Array.prototype.difference.call(this, any).length === 0;\n      }\n\n      return Array.prototype.includes.call(this, any);\n    },\n  },\n  unique: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return [...new Set(this)];\n    },\n  },\n  clean: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return this.filter(Boolean);\n    },\n  },\n  numbers: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return this.filter((item) => {\n        return item === 0 ? true : Number(item);\n      });\n    },\n  },\n  flatten: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(deep = false) {\n      arrayErrorHandler(this);\n\n      if (Boolean.isBoolean(deep) && !!deep) {\n        return [].concat(...this.map((item) => {\n          if (Array.isArray(item)) {\n            return item.flatten(true);\n          }\n\n          return item;\n        }));\n      }\n\n      const depth = deep || 1;\n\n      return this.reduce((acc, item) => {\n        if (depth > 1 && Array.isArray(item)) {\n          return acc.concat(item.flatten(depth - 1));\n        }\n\n        return acc.concat(item);\n      }, []);\n    },\n  },\n  shuffle: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      const [...arr] = this;\n\n      let m = arr.length;\n\n      while (m) {\n        const i = Math.floor(Math.random() * m--);\n        [arr[m], arr[i]] = [arr[i], arr[m]];\n      }\n\n      return arr;\n    },\n  },\n  chunks: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(size = 0) {\n      arrayErrorHandler(this);\n\n      if (size > 0) {\n        return Array.from({\n          length: Math.ceil(this.length / size),\n        }, (v, i) => {\n          return this.slice(i * size, i * size + size);\n        });\n      }\n\n      return this;\n    },\n  },\n  head: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return this.length >= 1 ? this[0] : null;\n    },\n  },\n  tail: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return this.length > 1 ? this.slice(1) : this;\n    },\n  },\n  cut: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return this.length > 1 ? this.slice(0, -1) : this;\n    },\n  },\n  last: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      arrayErrorHandler(this);\n\n      return this.length >= 1 ? this[this.length - 1] : null;\n    },\n  },\n  // sortBy(propNames, propDirections) {\n  //   if (String.isString(propNames)) {\n  //     propNames = [propNames];\n  //   }\n\n  //   if (!!propDirections) {\n  //     if (String.isString(propDirections)) {\n  //       propDirections = [propDirections];\n  //     }\n  //   } else {\n  //     propDirections = propNames.map(() => {\n  //       return 'asc';\n  //     });\n  //   }\n\n  //   return _.orderBy(this, propNames, propDirections);\n  // },\n\n  // deepSortBy(propNames, propDirections = null, childrenPropName = 'children') {\n  //   if (String.isString(propNames)) {\n  //     propNames = [propNames];\n  //   }\n\n  //   if (!!propDirections) {\n  //     if (String.isString(propDirections)) {\n  //       propDirections = [propDirections];\n  //     }\n  //   } else {\n  //     propDirections = propNames.map(() => {\n  //       return 'asc';\n  //     });\n  //   }\n\n  //   return _.deepOrderBy(this, propNames, propDirections, childrenPropName);\n  // },\n\n  // filterBy(propNames, propValues) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propNames)) {\n  //     predicate = propNames;\n  //     return _.filter(this, predicate);\n  //   } else if (Array.isArray(propValues)) {\n  //     return _.filterByValues(this, propNames, propValues);\n  //   }\n\n  //   predicate = {};\n  //   predicate[propNames] = propValues;\n  //   return _.filter(this, predicate) || [];\n  // },\n\n  // pull(item) {\n  //   return _.pull(this, item);\n  // },\n\n  // pullBy(propName, propValue) {\n  //   if (Array.isArray(propName) && _.isFunction(propValue)) {\n  //     const values = propName;\n  //     const comparator = propValue;\n  //     return _.pullAllByComparator(this, values, comparator);\n  //   }\n\n  //   const predicate = {};\n  //   predicate[propName] = propValue;\n  //   return _.pullAllBy(this, [predicate]);\n  // },\n\n  // findBy(propName, propValue = null, reverse = false) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (predicate) {\n  //     if (reverse) {\n  //       return _.findLast(this, predicate);\n  //     }\n\n  //     return _.find(this, predicate);\n  //   }\n\n  //   return null;\n  // },\n\n  // deepFindBy(propName, propValue = null, childrenPropName = 'children') {\n  //   return _.deepFindBy(this, propName, propValue, childrenPropName);\n  // },\n\n  // indexBy(propName, propValue, reverse = false) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (predicate) {\n  //     if (reverse) {\n  //       return _.findLastIndex(this, predicate);\n  //     }\n\n  //     return _.findIndex(this, predicate);\n  //   }\n\n  //   return null;\n  // },\n\n  // containsBy(propName, propValue) {\n  //   return this.findBy(propName, propValue) !== undefined;\n  // },\n\n  // countBy(propName, propValue, falseValues) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (!!predicate) {\n  //     return _.countBy(this, predicate)[!!falseValues ? 'false' : 'true'];\n  //   }\n\n  //   return 0;\n  // },\n\n  // union(...arrays) {\n  //   return _.unionWith(this, ...arrays, _.isEqual);\n  // },\n\n  // random(weightField = null, valueField = null) {\n  //   if (!!weightField) {\n  //     return this.map((item) => {\n  //       return _.times(item[weightField || 'weight'], () => {\n  //         if (!!valueField) {\n  //           return item[valueField || 'value'];\n  //         }\n\n  //         return _.omit(item, weightField);\n  //       });\n  //     }).flatten().shuffle().first();\n  //   }\n\n  //   return _.sample(this);\n  // },\n\n  // each(iteratee, reverse = false) {\n  //   if (!!reverse) {\n  //     return _.eachRight(this, iteratee);\n  //   }\n\n  //   return _.each(this, iteratee);\n  // },\n\n  // first(propName, propValue) {\n  //   let a = this;\n\n  //   if (!!propName) {\n  //     a = this.filterBy(propName, propValue);\n  //   }\n\n  //   return _.first(a);\n  // },\n\n  // last(propName, propValue) {\n  //   let a = this;\n\n  //   if (!!propName) {\n  //     a = this.filterBy(propName, propValue);\n  //   }\n\n  //   return _.last(a);\n  // },\n\n  // sum(propName, startValue = 0) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName)) {\n  //     predicate = propName;\n  //   } else {\n  //     predicate = (acc, item) => {\n  //       return acc + item[propName];\n  //     };\n  //   }\n\n  //   return _.reduce(this, predicate, startValue);\n  // },\n\n  // deepMap(childrenPropName = 'children', iteratee) {\n  //   return _.deepMap(this, childrenPropName, iteratee);\n  // },\n\n  // reverse(clone = false) {\n  //   if (!!clone) {\n  //     return _.reverse(_.clone(this));\n  //   }\n\n  //   return _.reverse(this);\n  // },\n\n  // maxBy(propName = null) {\n  //   if (propName) {\n  //     return _.maxBy(this, propName);\n  //   }\n\n  //   return null;\n  // },\n};\n","/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nexport default {\n  /**\n   * loremizes an array\n   * @example <caption>eg. usage</caption>\n   * console.log(Array.lorem(5)); // [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.lorem(5, 1)); // [1, 1, 1, 1, 1];\n   *\n   * console.log(Array.lorem(5, '1')); // ['1', '1', '1', '1', '1'];\n   *\n   * console.log(Array.lorem(5, {type: 'a', value: 1}));\n   * // it logs\n   * [\n   *   {type: 'a', value: 1},\n   *   {type: 'a', value: 1},\n   *   {type: 'a', value: 1},\n   *   {type: 'a', value: 1},\n   *   {type: 'a', value: 1}\n   * ];\n   *\n   * console.log(Array.lorem(5, function(index) {\n   *   return {\n   *     type: 'a',\n   *     value: index,\n   *   };\n   * });\n   * // it logs\n   * [\n   *   {type: 'a', value: 1},\n   *   {type: 'a', value: 2},\n   *   {type: 'a', value: 3},\n   *   {type: 'a', value: 4},\n   *   {type: 'a', value: 5}\n   * ];\n   *\n   * @memberOf array\n   * @method lorem\n   * @instance\n   * @param {number} items\n   * @param {function|object} [model=false]\n   * @return {array}\n   */\n  lorem: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(items = 0, model = false) {\n      const arr = [];\n\n      Function.times((i) => {\n        if (!!model) {\n          if (Function.isFunction(model)) {\n            arr.push(model(i));\n          } else {\n            arr.push(model);\n          }\n        } else {\n          arr.push(i);\n        }\n      }, items);\n\n      return arr;\n    },\n  },\n  /**\n   * clones an array\n   * @example <caption>eg. usage</caption>\n   * var arr1 = [\n   *   {type: 'a', value: 1},\n   *   {type: 'b', value: 8},\n   *   {type: 'c', value: 5},\n   *   {type: 'd', value: 7},\n   *   {type: 'e', value: 9},\n   *   {type: 'f', value: 3},\n   * ];\n   *\n   * var arrClone = Array.clone(arr1); // or var arrClone = arr1.clone();\n   *\n   * console.log(arr1 === arrClone); // false;\n   * @memberOf array\n   * @method clone\n   * @instance\n   * @param {array} arr - the array\n   * @return {array}\n   */\n  clone: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.clone.call(arr);\n    },\n  },\n  /**\n   * return a new array containing the difference between two arrays\n   * @example <caption>eg. usage</caption>\n   * var arr1 = ['a', 'e', 'i', 'o', 'u'];\n   * var arr2 = ['a', 'd', 'f', 'o', 'u'];\n   *\n   * console.log(Array.difference(arr1, arr2)); // ['d', 'e', 'f', 'i']\n   * console.log(Array.difference(arr1, arr2, false)); // ['e', 'i']\n   *\n   * console.log(arr1.difference(arr2)); // ['d', 'e', 'f', 'i']\n   * console.log(arr1.difference(arr2, false)); // ['e', 'i']\n   * @memberOf array\n   * @method difference\n   * @instance\n   * @param {array} arr1 - the first array\n   * @param {array} arr2 - the second array\n   * @param {boolean} symmetric - if true does the real difference between both of the two arrays\n   * @return {array}\n   */\n  difference: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr1, arr2, symmetric = true) {\n      return Array.prototype.difference.call(arr1, arr2, symmetric);\n    },\n  },\n  /**\n   * return a new array containing the intersection between two arrays\n   * @example <caption>eg. usage</caption>\n   * var arr1 = ['a', 'e', 'i', 'o', 'u'];\n   * var arr2 = ['a', 'd', 'f', 'o', 'u'];\n   *\n   * console.log(Array.intersection(arr1, arr2)); // ['a', 'o', 'u']\n   *\n   * console.log(arr1.intersection(arr2)); // ['a', 'o', 'u']\n   * @memberOf array\n   * @method intersection\n   * @instance\n   * @param {array} arr1 - the first array\n   * @param {array} arr2 - the second array\n   * @return {array}\n   */\n  intersection: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr1, arr2) {\n      return Array.prototype.intersection.call(arr1, arr2);\n    },\n  },\n\n  /**\n   * checks if an Array contains something\n   * @example <caption>eg. usage</caption>\n   * var arr = ['a', 'e', 'i', 'o', 'u'];\n   *\n   * console.log(Array.contains(arr, 'b')); // false\n   * console.log(Array.contains(arr, 'a')); // true\n   * console.log(Array.contains(arr, ['a', 'b', 'e']); // true\n   * console.log(Array.contains(arr, ['a', 'b', 'e'], true); // false\n   *\n   * console.log(arr.contains('b')); // false\n   * console.log(arr.contains('a')); // true\n   * console.log(arr.contains(['a', 'b', 'e']); // true\n   * console.log(arr.contains(['a', 'b', 'e'], true); // false\n   * @memberOf array\n   * @method contains\n   * @instance\n   * @param {array} arr - the array to be checked\n   * @param {array|*} any - can be anything or an array of anything\n   * @param {boolean} [all=false] - specify to check if the array must contain all items\n   * @return {boolean}\n   */\n  contains: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr, any, all = false) {\n      return Array.prototype.contains.call(arr, any, all);\n    },\n  },\n  /**\n   * returns a new unique items array from an array<br><br>\n   * @example <caption>eg. usage</caption>\n   * var arr = ['a', 'a', 'e', 'i', 'o', 'u'];\n   *\n   * console.log(Array.unique(arr); // ['a', 'e', 'i', 'o', 'u']\n   * console.log(arr.unique(); // ['a', 'e', 'i', 'o', 'u']\n   * @memberOf array\n   * @method unique\n   * @instance\n   * @param {array} arr - the array to be uniqued\n   * @return {array}\n   */\n  unique: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.unique.call(arr);\n    },\n  },\n  /**\n   * cleans up an array from falsy values (0, undefined, null, false) out of an array<br><br>\n   * @example <caption>eg. usage</caption>\n   * var arr = [false, true, undefined, 0, 1, null, 'a string', {}, []];\n   *\n   * console.log(Array.clean(arr); // [true, 1, 'a string', {}, []]\n   * console.log(arr.clean(); // [true, 1, 'a string', {}, []]\n   * @memberOf array\n   * @method clean\n   * @instance\n   * @param {array} arr - the array to be cleaned\n   * @return {array}\n   */\n  clean: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.clean.call(arr);\n    },\n  },\n  /**\n   * extracts only numbers values out of an array<br><br>\n   * @example <caption>eg. usage</caption>\n   * var arr = [null, 'a string', 1, false, undefined, {}, [], 7.85, 0, -0.5];\n   *\n   * console.log(Array.numbers(arr); // [1, 7.85, 0, -0.5]\n   * console.log(arr.numbers(); // [1, 7.85, 0, -0.5]\n   * @memberOf array\n   * @method numbers\n   * @instance\n   * @param {array} arr - the array to be filtered\n   * @return {array}\n   */\n  numbers: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.numbers.call(arr);\n    },\n  },\n  /**\n   * flattens array a single level deep,<br>\n   * or with deep parameter (true boolean) recursively flattens array,<br>\n   * or with deep parameter (number) you specify the recursion depth\n   * @example <caption>eg. usage</caption>\n   * var a = [1, [2, [3, [4]], 5]];\n   *\n   * console.log(Array.flatten(a)); // [1, 2, [3, [4]], 5]\n   * console.log(Array.flatten(a, 1)); // same as above\n   * console.log(a.flatten()); // same as above\n   * console.log(a.flatten(1)); // same as above\n   *\n   * console.log(Array.flatten(a, true)); // [1, 2, 3, 4, 5]\n   * console.log(a.flatten(true)); // same as above\n   *\n   * console.log(Array.flatten(a, 2)); // [1, 2, 3, [4], 5]\n   * console.log(a.flatten(2)); // same as above\n   *\n   * console.log(Array.flatten(a, 3)); // [1, 2, 3, 4, 5]\n   * console.log(a.flatten(3)); // same as above\n   * @memberOf array\n   * @method flatten\n   * @instance\n   * @param {array} arr - the array\n   * @param {boolean|number} [deep=false] - the deep (boolean) or depth (number) parameter specifies to do a full recursion or the recursion depth\n   * @return {array}\n   */\n  flatten: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr, deep = false) {\n      return Array.prototype.flatten.call(arr, deep);\n    },\n  },\n  /**\n   * creates an array of shuffled values, using a version of the Fisher-Yates shuffle. (from lodash documentation)\n   * @example <caption>eg. usage</caption>\n   * var a = [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.shuffle(a)); // [4, 3, 5, 1, 2]\n   * console.log(a.shuffle()); // same as above (or another randomization ;-)\n   * @memberOf array\n   * @method shuffle\n   * @instance\n   * @param {array} arr - the array\n   * @return {array}\n   */\n  shuffle: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.shuffle.call(arr);\n    },\n  },\n  /**\n   * splits an array in n-chunks\n   * @example <caption>eg. usage</caption>\n   * var a = [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.chunks(a)); // []\n   * console.log(a.chunks()); // same as above\n   *\n   * console.log(Array.chunks(a, 1)); // [[1], [2], [3], [4], [5]]\n   * console.log(a.chunks(1)); // same as above\n   *\n   * console.log(Array.chunks(a, 2)); // [[1, 2], [3, 4], [5]]\n   * console.log(a.chunks(2)); // same as above\n   *\n   * console.log(Array.chunks(a, 3)); // [[1, 2, 3], [4, 5]]\n   * console.log(a.chunks(3)); // same as above\n   * @memberOf array\n   * @method chunks\n   * @instance\n   * @param {array} arr - the array\n   * @param {number} [size=0] - the n pieces of chunks you want\n   * @return {array}\n   */\n  chunks: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr, size = 0) {\n      return Array.prototype.chunks.call(arr, size);\n    },\n  },\n  /**\n   * returns the first item in an array\n   * @example <caption>eg. usage</caption>\n   * var a = [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.head(a)); // 1\n   * console.log(a.head()); // same as above\n   * @memberOf array\n   * @method tail\n   * @instance\n   * @param {array} arr - the array\n   * @return {any}\n   */\n  head: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.head.call(arr);\n    },\n  },\n  /**\n   * returns a sliced array with all elements but the first item\n   * @example <caption>eg. usage</caption>\n   * var a = [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.tail(a)); // [2, 3, 4, 5]\n   * console.log(a.tail()); // same as above\n   * @memberOf array\n   * @method tail\n   * @instance\n   * @param {array} arr - the array\n   * @return {array}\n   */\n  tail: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.tail.call(arr);\n    },\n  },\n  /**\n   * returns a sliced array with all elements but the last item\n   * @example <caption>eg. usage</caption>\n   * var a = [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.cut(a)); // [1, 2, 3, 4]\n   * console.log(a.cut()); // same as above\n   * @memberOf array\n   * @method cut\n   * @instance\n   * @param {array} arr - the array\n   * @return {array}\n   */\n  cut: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.cut.call(arr);\n    },\n  },\n  /**\n   * returns the last item in an array\n   * @example <caption>eg. usage</caption>\n   * var a = [1, 2, 3, 4, 5];\n   *\n   * console.log(Array.last(a)); // 5\n   * console.log(a.last()); // same as above\n   * @memberOf array\n   * @method tail\n   * @instance\n   * @param {array} arr - the array\n   * @return {any}\n   */\n  last: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return Array.prototype.last.call(arr);\n    },\n  },\n  // /**\n  //  * finds max value by propName in a collection array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 8},\n  //  *   {type: 'c', value: 5},\n  //  *   {type: 'd', value: 7},\n  //  *   {type: 'e', value: 9},\n  //  *   {type: 'f', value: 3},\n  //  * ];\n  //  *\n  //  * console.log(Array.maxBy(a, 'value')); // {type:'e', value: 9}\n  //  * console.log(Array.maxBy(a, 'type')); // {type:'f', value: 3}\n  //  *\n  //  * console.log(a.maxBy('value')); // {type:'e', value: 9}\n  //  * console.log(a.maxBy('type')); // {type:'f', value: 3}\n  //  * @memberOf array\n  //  * @method maxBy\n  //  * @instance\n  //  * @param {array} a - the array to check for max value\n  //  * @param {string} [propName=null] - the property name to use for comparation\n  //  * @return {object}\n  //  */\n  // maxBy(a, propName) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.maxBy.call(a, propName);\n  //   }\n\n  //   return a;\n  // },\n};\n","/**\n * @namespace collection\n * @description extensions for the JS Collection\n */\nexport default {\n  //TODO: implement rest arrays difference\n  difference: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr, symmetric = true) {\n      if (!!symmetric) {\n        return Array.prototype.unique.call([\n          ...this.filter((item) => {\n            return !arr.includes(item);\n          }),\n          ...arr.filter((item) => {\n            return !this.includes(item);\n          }),\n        ]);\n      }\n\n      return this.filter((item) => {\n        return !arr.includes(item);\n      });\n    },\n  },\n  // //TODO: implement rest arrays intersection\n  intersection: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(arr) {\n      return this.filter((item) => arr.includes(item));\n    },\n  },\n  contains: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(any, all = false) {\n      if (Array.isArray(any)) {\n        if (!all) {\n          return Array.prototype.intersection.call(this, any).length > 0;\n        }\n\n        return Array.prototype.difference.call(this, any).length === 0;\n      }\n\n      return Array.prototype.includes.call(this, any);\n    },\n  },\n  unique: {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value() {\n      return [...new Set(this)];\n    },\n  },\n  // sortBy(propNames, propDirections) {\n  //   if (String.isString(propNames)) {\n  //     propNames = [propNames];\n  //   }\n\n  //   if (!!propDirections) {\n  //     if (String.isString(propDirections)) {\n  //       propDirections = [propDirections];\n  //     }\n  //   } else {\n  //     propDirections = propNames.map(() => {\n  //       return 'asc';\n  //     });\n  //   }\n\n  //   return _.orderBy(this, propNames, propDirections);\n  // },\n\n  // deepSortBy(propNames, propDirections = null, childrenPropName = 'children') {\n  //   if (String.isString(propNames)) {\n  //     propNames = [propNames];\n  //   }\n\n  //   if (!!propDirections) {\n  //     if (String.isString(propDirections)) {\n  //       propDirections = [propDirections];\n  //     }\n  //   } else {\n  //     propDirections = propNames.map(() => {\n  //       return 'asc';\n  //     });\n  //   }\n\n  //   return _.deepOrderBy(this, propNames, propDirections, childrenPropName);\n  // },\n\n  // filterBy(propNames, propValues) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propNames)) {\n  //     predicate = propNames;\n  //     return _.filter(this, predicate);\n  //   } else if (Array.isArray(propValues)) {\n  //     return _.filterByValues(this, propNames, propValues);\n  //   }\n\n  //   predicate = {};\n  //   predicate[propNames] = propValues;\n  //   return _.filter(this, predicate) || [];\n  // },\n\n  // pull(item) {\n  //   return _.pull(this, item);\n  // },\n\n  // pullBy(propName, propValue) {\n  //   if (Array.isArray(propName) && _.isFunction(propValue)) {\n  //     const values = propName;\n  //     const comparator = propValue;\n  //     return _.pullAllByComparator(this, values, comparator);\n  //   }\n\n  //   const predicate = {};\n  //   predicate[propName] = propValue;\n  //   return _.pullAllBy(this, [predicate]);\n  // },\n\n  // findBy(propName, propValue = null, reverse = false) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (predicate) {\n  //     if (reverse) {\n  //       return _.findLast(this, predicate);\n  //     }\n\n  //     return _.find(this, predicate);\n  //   }\n\n  //   return null;\n  // },\n\n  // deepFindBy(propName, propValue = null, childrenPropName = 'children') {\n  //   return _.deepFindBy(this, propName, propValue, childrenPropName);\n  // },\n\n  // indexBy(propName, propValue, reverse = false) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (predicate) {\n  //     if (reverse) {\n  //       return _.findLastIndex(this, predicate);\n  //     }\n\n  //     return _.findIndex(this, predicate);\n  //   }\n\n  //   return null;\n  // },\n\n  // containsBy(propName, propValue) {\n  //   return this.findBy(propName, propValue) !== undefined;\n  // },\n\n  // countBy(propName, propValue, falseValues) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (!!predicate) {\n  //     return _.countBy(this, predicate)[!!falseValues ? 'false' : 'true'];\n  //   }\n\n  //   return 0;\n  // },\n\n  // union(...arrays) {\n  //   return _.unionWith(this, ...arrays, _.isEqual);\n  // },\n\n  // random(weightField = null, valueField = null) {\n  //   if (!!weightField) {\n  //     return this.map((item) => {\n  //       return _.times(item[weightField || 'weight'], () => {\n  //         if (!!valueField) {\n  //           return item[valueField || 'value'];\n  //         }\n\n  //         return _.omit(item, weightField);\n  //       });\n  //     }).flatten().shuffle().first();\n  //   }\n\n  //   return _.sample(this);\n  // },\n\n  // each(iteratee, reverse = false) {\n  //   if (!!reverse) {\n  //     return _.eachRight(this, iteratee);\n  //   }\n\n  //   return _.each(this, iteratee);\n  // },\n\n  // first(propName, propValue) {\n  //   let a = this;\n\n  //   if (!!propName) {\n  //     a = this.filterBy(propName, propValue);\n  //   }\n\n  //   return _.first(a);\n  // },\n\n  // last(propName, propValue) {\n  //   let a = this;\n\n  //   if (!!propName) {\n  //     a = this.filterBy(propName, propValue);\n  //   }\n\n  //   return _.last(a);\n  // },\n\n  // sum(propName, startValue = 0) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName)) {\n  //     predicate = propName;\n  //   } else {\n  //     predicate = (acc, item) => {\n  //       return acc + item[propName];\n  //     };\n  //   }\n\n  //   return _.reduce(this, predicate, startValue);\n  // },\n\n  // deepMap(childrenPropName = 'children', iteratee) {\n  //   return _.deepMap(this, childrenPropName, iteratee);\n  // },\n\n  // lorem(items, model = false) {\n  //   return Number.times(items, (i) => {\n  //     if (!!model) {\n  //       return Function.isFunction(model) ? model(i) : model;\n  //     }\n\n  //     return i;\n  //   });\n  // },\n\n  // flatten(deep) {\n  //   if (!!deep) {\n  //     if (Number.isNumber(deep)) {\n  //       return _.flattenDepth(this, deep);\n  //     } else if (Boolean.isBoolean(deep)) {\n  //       return _.flattenDeep(this);\n  //     }\n  //   }\n\n  //   return _.flatten(this);\n  // },\n\n  // shuffle() {\n  //   return _.shuffle(this);\n  // },\n\n  // split(n = 0) {\n  //   return _.chunk(this, n);\n  // },\n\n  // reverse(clone = false) {\n  //   if (!!clone) {\n  //     return _.reverse(_.clone(this));\n  //   }\n\n  //   return _.reverse(this);\n  // },\n\n  // tail() {\n  //   return _.tail(this);\n  // },\n\n  // cut() {\n  //   return _.initial(this);\n  // },\n\n  // clone() {\n  //   return [...this];\n  // },\n\n  // maxBy(propName = null) {\n  //   if (propName) {\n  //     return _.maxBy(this, propName);\n  //   }\n\n  //   return null;\n  // },\n};\n","/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nimport prototype from './prototype';\nimport native from './native';\n\n/* eslint-disable no-useless-constructor */\nclass Collection extends Array {\n  constructor(...items) {\n    super(...items);\n  }\n}\n\nif(!!window) {\n  window.Collection = Collection;\n}\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import ObjectExt from './Object/index';\nimport FunctionExt from './Function/index';\nimport BooleanExt from './Boolean/index';\nimport NumberExt from './Number/index';\nimport DateExt from './Date/index';\nimport StringExt from './String/index';\nimport RegExpExt from './RegExp/index';\nimport ArrayExt from './Array/index';\nimport CollectionExt from './Collection/index';\n\nexport default {\n  Object: ObjectExt,\n  Function: FunctionExt,\n  Boolean: BooleanExt,\n  Number: NumberExt,\n  Date: DateExt,\n  String: StringExt,\n  RegExp: RegExpExt,\n  Array: ArrayExt,\n  Collection: CollectionExt,\n};\n","/**\n * @namespace collection\n * @description extensions for the JS Collection\n */\nexport default {\n  // /**\n  //  * creates an array of unique array values not included in the other provided arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var arr = ['a', 'e', 'i', 'o', 'u'];\n  //  * var arr2 = ['a', 'b', 'c', 'd', 'e'];\n  //  *\n  //  * console.log(Array.diff(arr, arr2)); // ['i', 'o', 'u']\n  //  * console.log(arr.diff(arr2)); // same as above\n  //  *\n  //  * console.log(Array.diff(arr2, arr)); // ['b', 'c', 'd']\n  //  * console.log(arr2.diff(arr)); // same as above\n  //  *\n  //  * var collection = [{id: 1, type: 'a'}, {id: 2, type: 'e'}, {id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}];\n  //  * var collection2 = [{id: 1, type: 'a'}, {id: 2, type: 'b'}, {id: 3, type: 'c'}, {id: 4, type: 'd'}, {id: 5, type: 'e'}];\n  //  *\n  //  * console.log(Array.diff(collection, collection2)); // [{id: 2, type: 'e'}, {id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}]\n  //  * console.log(collection.diff(collection2)); // same as above\n  //  *\n  //  * console.log(Array.diff(collection, collection2, 'type'); // [{id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}]\n  //  * console.log(collection.diff(collection2, 'type'); // same as above\n  //  *\n  //  * console.log(Array.diff(collection, collection2, function(aitem, bitem) {\n  //  *   return aitem.type === bitem.type;\n  //  * })); // same as above\n  //  *\n  //  * console.log(collection.diff(collection2, function(aitem, bitem) {\n  //  *   return aitem.type === bitem.type;\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method diff\n  //  * @instance\n  //  * @param {array} a - the first array to use for the diff\n  //  * @param {array} b - the second array to use for the diff\n  //  * @param {function|string} [fn=null] - function to use as comparator for the diff or the propname to check for the equality or nothing for standard equality<br>\n  //  * the function will be invoked with an item from the first array and an item from the second array,<br>\n  //  * so the function has to look like this<br>\n  //  * <pre>\n  //  * function(aitem, bitem) {}\n  //  * </pre>\n  //  * @param {object|any} fn.aitem - the item from the first array\n  //  * @param {object|any} fn.bitem - the item from the second array\n  //  * @return {array}\n  //  */\n  // diff(a, b, fn = null) {\n  //   if (Array.isArray(a) && Array.isArray(b)) {\n  //     return Array.prototype.diff.call(a, b, fn);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * creates an array of unique array values not included in the other provided arrays based on a field equality (aliases Array.diff)\n  //  * @example <caption>eg. usage</caption>\n  //  * @memberOf array\n  //  * @method diffBy\n  //  * @instance\n  //  * @param {array} a - the first array to use for the diff\n  //  * @param {array} b - the second array to use for the diff\n  //  * @param {string} propName - the property name to be used in comparator for the diff\n  //  * @return {array|null}\n  //  */\n  // diffBy(a, b, propName) {\n  //   if (Array.isArray(a) && Array.isArray(b)) {\n  //     return Array.diff(a, b, propName);\n  //   }\n\n  //   return null;\n  // },\n\n  // /**\n  //  * sorts an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {id: 1, type: 'a'},\n  //  *   {id: 3, type: 'i'},\n  //  *   {id: 5, type: 'u'},\n  //  *   {id: 4, type: 'o'},\n  //  *   {id: 2, type: 'e'}\n  //  * ];\n  //  *\n  //  * console.log(Array.sortBy(collection, 'type')); // [{id: 1, type: 'a'}, {id: 2, type: 'e'}, {id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}]\n  //  * console.log(collection.sortBy('type')); // same as above\n  //  *\n  //  * console.log(Array.sortBy(collection, 'id', 'desc')); // [{id: 5, type: 'u'}, {id: 4, type: 'o'}, {id: 3, type: 'i'}, {id: 2, type: 'e'}, {id: 1, type: 'a'}]\n  //  * console.log(collection.softBy('id', 'desc')); // same as above\n  //  *\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.sortBy(collection, ['type', 'value']));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * // ];\n  //  *\n  //  * console.log(collection.sortBy(['type', 'value'])); // same as above\n  //  *\n  //  * console.log(Array.sortBy(collection, ['type', 'value'], ['asc', 'desc']));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * // ];\n  //  *\n  //  * console.log(collection.sortBy(['type', 'value'], ['asc', 'desc'])); // same as above\n  //  * @memberOf array\n  //  * @method sortBy\n  //  * @instance\n  //  * @param {array} a - the array to be sorted\n  //  * @param {array|string} propNames - the propName(s) you want to use for sorting\n  //  * @param {array|string|null} [propDirections=null] - the propDirection(s) you want to use for sorting (respect propName(s) order)\n  //  * @return {array}\n  //  */\n  // sortBy(a, propNames, propDirections = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.sortBy.call(a, propNames, propDirections);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * deeply sorts an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'b', value: 'b', items: [\n  //  *     {type: 'b', value: 'b-1'},\n  //  *     {type: 'b', value: 'b-5'},\n  //  *     {type: 'b', value: 'b-2'},\n  //  *     {type: 'b', value: 'b-4'},\n  //  *     {type: 'b', value: 'b-3'},\n  //  *   ]},\n  //  *   {type: 'd', value: 'd'},\n  //  *   {type: 'a', value: 'a', items: [\n  //  *     {type: 'a', value: 'a-1', items: [\n  //  *       {type: 'a', value: 'a-1-1'},\n  //  *       {type: 'a', value: 'a-1-3'},\n  //  *       {type: 'a', value: 'a-1-2'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-5', items: [\n  //  *       {type: 'a', value: 'a-5-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-2', items: [\n  //  *       {type: 'a', value: 'a-2-1'},\n  //  *       {type: 'a', value: 'a-2-3'},\n  //  *       {type: 'a', value: 'a-2-2'},\n  //  *       {type: 'a', value: 'a-2-4'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-4', items: [\n  //  *       {type: 'a', value: 'a-4-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-3', items: [\n  //  *       {type: 'a', value: 'a-3-2'},\n  //  *       {type: 'a', value: 'a-3-1'},\n  //  *     ]}},\n  //  *   ]},\n  //  *   {type: 'c', value: 'c', items: []},\n  //  * ];\n  //  *\n  //  * console.log(Array.deepSortBy(collection, ['type', 'value'], ['asc', 'desc'], 'items'));\n  //  * // [\n  //  * //   {type: 'a', value: 'a', items: [\n  //  * //     {type: 'a', value: 'a-5', items: [\n  //  * //       {type: 'a', value: 'a-5-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-4', items: [\n  //  * //       {type: 'a', value: 'a-4-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-3', items: [\n  //  * //       {type: 'a', value: 'a-3-2'},\n  //  * //       {type: 'a', value: 'a-3-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-2', items: [\n  //  * //       {type: 'a', value: 'a-2-4'},\n  //  * //       {type: 'a', value: 'a-2-3'},\n  //  * //       {type: 'a', value: 'a-2-2'},\n  //  * //       {type: 'a', value: 'a-2-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-1', items: [\n  //  * //       {type: 'a', value: 'a-1-3'},\n  //  * //       {type: 'a', value: 'a-1-2'},\n  //  * //       {type: 'a', value: 'a-1-1'},\n  //  * //     ]}},\n  //  * //   ]},\n  //  * //   {type: 'b', value: 'b', items: [\n  //  * //     {type: 'b', value: 'b-5'},\n  //  * //     {type: 'b', value: 'b-4'},\n  //  * //     {type: 'b', value: 'b-3'},\n  //  * //     {type: 'b', value: 'b-2'},\n  //  * //     {type: 'b', value: 'b-1'},\n  //  * //   ]},\n  //  * //   {type: 'c', value: 'c', items: []},\n  //  * //   {type: 'd', value: 'd'},\n  //  * // ]\n  //  * @memberOf array\n  //  * @method deepSortBy\n  //  * @instance\n  //  * @param {array} a - the array to be sorted\n  //  * @param {array|string} propNames - the propName(s) you want to use for sorting\n  //  * @param {array|string|null} [propDirections=null] - the propDirection(s) you want to use for sorting (respect propName(s) order)\n  //  * @param {string} [childrenPropName='children'] - the childrenPropName to be used for sorting\n  //  * @return {array}\n  //  */\n  // deepSortBy(a, propNames, propDirections = null, childrenPropName = 'children') {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.deepSortBy.call(a, propNames, propDirections, childrenPropName);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * filters an array by propName or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.filterBy(collection, type, 'a'));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.filterBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.filterBy(collection, function(item) {\n  //  *   return item.value.contains('1');\n  //  * }));\n  //  * // [\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.filterBy(function(item) {\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method filterBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} propValue\n  //  * @return {array}\n  //  */\n  // filterBy(a, propName, propValue) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.filterBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * removes an item from an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.pull(collection, {type: 'a', value: 'a'}));\n  //  * // [\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.pull({type: 'a', value: 'a'})); // same as above\n  //  * @memberOf array\n  //  * @method pull\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {any} any\n  //  * @return {array}\n  //  */\n  // pull(a, item) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.pull.call(a, item);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * removes an item from an array by propName/propValue pair or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.pullBy(collection, 'type', 'a'));\n  //  * // [\n  //  * //   {type: 'c', value: 'c'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.pullBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.pullBy(collection, function(item) {\n  //  *   return item.value.contains('1');\n  //  * }));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.pullBy(function(item) {\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method pullBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} propValue\n  //  * @return {array}\n  //  */\n  // pullBy(a, propName, propValue) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.pullBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * finds an item in an array by propName/propValue pair or predicate,\n  //  * returns the first element found respecting the specified predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.findBy(collection, 'type', 'a')); // {type: 'a', value: 'a'}\n  //  * console.log(collection.findBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.findBy(collection, 'type', 'a', true)); // {type: 'a', value: 'a-1-1'}\n  //  * console.log(collection.findBy('type', 'a', true)); // same as above\n  //  *\n  //  * console.log(Array.findBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // {type: 'a', value: 'a-2-1'}\n  //  *\n  //  * console.log(collection.findBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  *\n  //  * console.log(Array.findBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // {type: 'a', value: 'a-1-1'}\n  //  *\n  //  * console.log(collection.findBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method findBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @param {boolean} [reverse=false] - is true specified to search from right to left\n  //  * @return {any|null}\n  //  */\n  // findBy(a, propName, propValue = null, reverse = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.findBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * deeply sorts an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'b', value: 'b', items: [\n  //  *     {type: 'b', value: 'b-1'},\n  //  *     {type: 'b', value: 'b-5'},\n  //  *     {type: 'b', value: 'b-2'},\n  //  *     {type: 'b', value: 'b-4'},\n  //  *     {type: 'b', value: 'b-3'},\n  //  *   ]},\n  //  *   {type: 'd', value: 'd'},\n  //  *   {type: 'a', value: 'a', items: [\n  //  *     {type: 'a', value: 'a-1', items: [\n  //  *       {type: 'a', value: 'a-1-1'},\n  //  *       {type: 'a', value: 'a-1-3'},\n  //  *       {type: 'a', value: 'a-1-2'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-5', items: [\n  //  *       {type: 'a', value: 'a-5-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-2', items: [\n  //  *       {type: 'a', value: 'a-2-1'},\n  //  *       {type: 'a', value: 'a-2-3'},\n  //  *       {type: 'a', value: 'a-2-2'},\n  //  *       {type: 'a', value: 'a-2-4'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-4', items: [\n  //  *       {type: 'a', value: 'a-4-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-3', items: [\n  //  *       {type: 'a', value: 'a-3-2'},\n  //  *       {type: 'a', value: 'a-3-1'},\n  //  *     ]}},\n  //  *   ]},\n  //  *   {type: 'c', value: 'c', items: []},\n  //  * ];\n  //  *\n  //  * console.log(Array.deepFindBy(collection, 'value', 'a-2-1', 'items')); // {type: 'a', value: 'a-2-1'}\n  //  * console.log(collection.deepFindBy('value', 'a-2-1', 'items')); // same as above\n  //  *\n  //  * console.log(Array.deepFindBy(collection, function(item) {\n  //  *    return item.value.contains('a-2-1');\n  //  * }, null, 'items')); // {type: 'a', value: 'a-2-1'}\n  //  *\n  //  * console.log(collection.deepFindBy(function(item) {\n  //  *    return item.value.contains('a-2-1');\n  //  * }, null, 'items')); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method deepFindBy\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {string|function} propName - the propName you want to use for the deep find\n  //  * @param {any} [propValue=null] - the propValue you want to use for the deep find\n  //  * @param {string} [childrenPropName='children'] - the childrenPropName to be used for the deep find recursion\n  //  * @return {array}\n  //  */\n  // deepFindBy(a, propName, propValue = null, childrenPropName = 'children') {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.deepFindBy.call(a, propName, propValue, childrenPropName);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * finds the index of an item in an array by propName/propValue pair or predicate,\n  //  * returns the first element found respecting the specified predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.indexBy(collection, 'type', 'a')); // 0\n  //  * console.log(collection.indexBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.indexBy(collection, 'type', 'a', true)); // 4\n  //  * console.log(collection.indexBy('type', 'a', true)); // same as above\n  //  *\n  //  * console.log(Array.indexBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // 1\n  //  *\n  //  * console.log(collection.indexBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  *\n  //  * console.log(Array.indexBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // 4\n  //  *\n  //  * console.log(collection.indexBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method indexBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @param {boolean} [reverse=false] - is true specified to search from right to left\n  //  * @return {any|null}\n  //  */\n  // indexBy(a, propName, propValue, reverse = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.indexBy.call(a, propName, propValue, reverse);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * checks if an array contains an item by propName/propValue pair or predicate,\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  *   {type: 'b', value: 'b-1-1'},\n  //  * ];\n  //  *\n  //  * console.log(Array.containsBy(collection, 'value', 'a-2-2')); // false\n  //  * console.log(collection.containsBy('value', 'a-2-2')); // same as above\n  //  *\n  //  * console.log(Array.containsBy(collection, 'value', 'a-2-1')); // true\n  //  * console.log(collection.containsBy('value', 'a-2-1')); // same as above\n  //  *\n  //  * console.log(Array.containsBy(collection, function(item) {\n  //  *   return item.type === 'c';\n  //  * })); // true\n  //  *\n  //  * console.log(collection.containsBy(function(item) {\n  //  *   return item.type === 'c';\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method containsBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @return {any|null}\n  //  */\n  // containsBy(a, propName, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.containsBy.call(a, propName, propValue);\n  //   }\n\n  //   return false;\n  // },\n\n  // /**\n  //  * counts items in array that respects propName/propValue pair or predicate,\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  *   {type: 'b', value: 'b-1-1'},\n  //  * ];\n  //  *\n  //  * console.log(Array.countBy(collection, 'type', 'a')); // 4\n  //  * console.log(collection.countBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.countBy(collection, 'type', 'a', true)); // 3, it counts false values\n  //  * console.log(collection.countBy('type', 'a', true)); // same as above\n  //  *\n  //  * console.log(Array.countBy(collection, function(item) {\n  //  *   return item.type === 'b';\n  //  * })); // 2\n  //  *\n  //  * console.log(collection.countBy(function(item) {\n  //  *   return item.type === 'b';\n  //  * })); // same as above\n  //  *\n  //  * console.log(Array.countBy(collection, function(item) {\n  //  *   return item.type === 'b';\n  //  * }, null, true)); // 5, it counts false values\n  //  *\n  //  * console.log(collection.countBy(function(item) {\n  //  *   return item.type === 'b';\n  //  * }, null, true)); // same as above\n  //  * @memberOf array\n  //  * @method countBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any|null} [propValue=null]\n  //  * @param {boolean} [falseValues=false]\n  //  * @return {number}\n  //  */\n  // countBy(a, propName, propValue = null, falseValues = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.countBy.call(a, propName, propValue, falseValues);\n  //   }\n\n  //   return 0;\n  // },\n\n  // /**\n  //  * returns a new array with the intersection of passed arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  * var b = [1, 4, 5, 7, 8];\n  //  *\n  //  * console.log(Array.intersection(a, b)); // [1, 4, 5]\n  //  * console.log(a.intersection(b)); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 2},\n  //  *   {type: 3, value: 1},\n  //  * ];\n  //  *\n  //  * var b = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 3},\n  //  *   {type: 3, value: 2},\n  //  *   {type: 4, value: 1},\n  //  *   {type: 5, value: 1},\n  //  * ];\n  //  *\n  //  * console.log(Array.intersection(a, b));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * //   {type: 2, value: 1},\n  //  * // ]\n  //  *\n  //  * console.log(a.intersection(b)); // same as above\n  //  *\n  //  * var c = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.intersection(a, b, c));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * // ]\n  //  *\n  //  * console.log(a.intersection(b, c)); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method intersection\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {...array} arrays\n  //  * @return {any|null}\n  //  */\n  // intersection(a, ...arrays) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.intersection.call(a, ...arrays);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * returns a new array with the union of passed arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  * var b = [1, 4, 5, 7, 8];\n  //  *\n  //  * console.log(Array.union(a, b)); // [1, 2, 3, 4, 5, 7, 8]\n  //  * console.log(a.union(b)); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 2},\n  //  *   {type: 3, value: 1},\n  //  * ];\n  //  *\n  //  * var b = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 3},\n  //  *   {type: 3, value: 2},\n  //  *   {type: 4, value: 1},\n  //  *   {type: 5, value: 1},\n  //  * ];\n  //  *\n  //  * console.log(Array.union(a, b));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * //   {type: 1, value: 2},\n  //  * //   {type: 2, value: 1},\n  //  * //   {type: 2, value: 2},\n  //  * //   {type: 3, value: 1},\n  //  * //   {type: 2, value: 3},\n  //  * //   {type: 4, value: 1},\n  //  * //   {type: 5, value: 1},\n  //  * // ]\n  //  *\n  //  * console.log(a.union(b)); // same as above\n  //  *\n  //  * var c = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.union(a, b, c));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * //   {type: 1, value: 2},\n  //  * //   {type: 2, value: 1},\n  //  * //   {type: 2, value: 2},\n  //  * //   {type: 3, value: 1},\n  //  * //   {type: 2, value: 3},\n  //  * //   {type: 4, value: 1},\n  //  * //   {type: 5, value: 1},\n  //  * //   {type: 2, value: 4},\n  //  * // ]\n  //  *\n  //  * console.log(a.union(b, c)); // same as above\n  //  * @memberOf array\n  //  * @method union\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {...array} arrays\n  //  * @return {any|null}\n  //  */\n  // union(a, ...arrays) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.union.call(a, ...arrays);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * @alias array.pullBy\n  //  * @memberOf array\n  //  * @method removeBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @return {array}\n  //  */\n  // removeBy(a, propName, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.pullBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * randomizes an item from an array, with optional weight parameters\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.random(a)); // eg. 3\n  //  * console.log(a.random()); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.random(a)); // eg. {type: 'a', value: 1}\n  //  * console.log(a.random()); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1, weight: 3},\n  //  *   {type: 'b', value: 2, weight: 5},\n  //  *   {type: 'c', value: 3, weight: 1},\n  //  *   {type: 'd', value: 4, weight: 1},\n  //  * ];\n  //  *\n  //  * console.log(Array.random(a, 'weight')); // eg. {type: 'b', value: 2}\n  //  * console.log(a.random('weight')); // same as above\n  //  *\n  //  * console.log(Array.random(a, 'weight', 'value')); // eg. 2\n  //  * console.log(a.random('weight', 'value')); // same as above\n  //  * @memberOf array\n  //  * @method random\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string} [weightField=null]\n  //  * @param {string} [valueField=null]\n  //  * @return {any|null}\n  //  */\n  // random(a, weightField = null, valueField = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.random.call(a, weightField, valueField);\n  //   }\n\n  //   return null;\n  // },\n\n  // /**\n  //  * executes an iteratee n times as the array length, the iteratee will be invoked with tree arguments item, index, array\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * Array.each(a, function(item, index) {\n  //  *   console.log(item.type);\n  //  * });\n  //  *\n  //  * // it logs\n  //  * // 'a'\n  //  * // 'b'\n  //  * // 'c'\n  //  * // 'd'\n  //  *\n  //  * Array.each(a, function(item, index) {\n  //  *   console.log(item.type);\n  //  * }, true);\n  //  *\n  //  * // it logs\n  //  * // 'd'\n  //  * // 'c'\n  //  * // 'b'\n  //  * // 'a'\n  //  * @memberOf array\n  //  * @method each\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {function} iteratee\n  //  * @param {boolean} [reverse=false] - true if you want to do a reverse cycle\n  //  * @return {array}\n  //  */\n  // each(a, iteratee, reverse = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.each.call(a, iteratee, reverse);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns the first item in an array, with optional propName/propValue pair or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.first(a)); // {type: 'a', value: 1}\n  //  * console.log(a.first())); // {type: 'a', value: 1}\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.first(a, 'type', 'b')); // {type: 'b', value: 1}\n  //  * console.log(a.first('type', 'b'))); // {type: 'b', value: 1}\n  //  * @memberOf array\n  //  * @method first\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {string} [propName=null] - optional, combined with propValue filters the array before extracting the first item<br>\n  //  * or you can specify an optional function as predicate to customize the filter\n  //  * @param {string} [propValue=null] - optional, combined with propName filters the array before extracting the first item\n  //  * @return {any}\n  //  */\n  // first(a, propName = null, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.first.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns the last item in an array, with optional propName/propValue pair or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.last(a)); // {type: 'd', value: 4}\n  //  * console.log(a.last())); // {type: 'd', value: 4}\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 2},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.last(a, 'type', 'a')); // {type: 'a', value: 2}\n  //  * console.log(a.last('type', 'a'))); // {type: 'a', value: 2}\n  //  * @memberOf array\n  //  * @method last\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} [propName=null] - optional, combined with propValue filters the array before extracting the last item<br>\n  //  * or you can specify an optional function as predicate to customize the filter\n  //  * @param {string} [propValue=null] - optional, combined with propName filters the array before extracting the last item\n  //  * @return {any}\n  //  */\n  // last(a, propName = null, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.last.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * sums a collection by predicate or propName\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.sum(a, 'value', 0)); // 4 + 3 + 2 + 1 = 10\n  //  * console.log(a.sum('value', 0))); // same as above\n  //  *\n  //  * console.log(Array.sum(a, 'type', '')); // abcd\n  //  * console.log(a.sum('type', ''))); // same as above\n  //  *\n  //  * console.log(Array.sum(a, function(acc, item) {\n  //  *   return acc + item.value;\n  //  * }, 0)); // 4 + 3 + 2 + 1 = 10\n  //  *\n  //  * console.log(a.sum(function(acc, item) {\n  //  *   return acc + item.value;\n  //  * }, 0)); // same as above\n  //  * @memberOf array\n  //  * @method sum\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {function|string} predicate - the predicate should look like this in ES5<br>\n  //  * <pre>\n  //  * function(acc, item) {\n  //  *   return acc + item[propName];\n  //  * }\n  //  * </pre>\n  //  * or in ES6<br>\n  //  * <pre>\n  //  * (acc, item) => {\n  //  *   return acc + item[propName];\n  //  * }\n  //  * </pre><br>\n  //  * this kind of predicate will be implemented automatically if you specify a propName instead the predicate\n  //  * @param {object|any} predicate.acc - the accumulator variable used for the sum\n  //  * @param {object|any} predicate.item - the iterating item\n  //  * @param {any} [startValue=0]\n  //  * @return {any}\n  //  */\n  // sum(a, propName, startValue = 0) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.sum.call(a, propName, startValue);\n  //   }\n\n  //   return a;\n  // },\n  // /**\n  //  * deeply maps a recursive tree structure with (same structure) childrenPropName or 'children' property<br><br>\n  //  * {@link lodash#deepMap|for examples see lodash.deepMap}\n  //  * @memberOf array\n  //  * @method deepMap\n  //  * @instance\n  //  * @param {array|object} a - the array to use for the deep mapping\n  //  * @param {string} [childrenPropName='children'] - the property name to use for children collection\n  //  * @param {function} iteratee - the item mapping iteratee\n  //  */\n  // deepMap(a, childrenPropName = 'children', iteratee) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.deepMap.call(a, childrenPropName, iteratee);\n  //   }\n\n  //   return a;\n  // },\n  // /**\n  //  * loremizes an array\n  //  * @example <caption>eg. usage</caption>\n  //  * console.log(Array.lorem(5)); // [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.lorem(5, 1)); // [1, 1, 1, 1, 1];\n  //  *\n  //  * console.log(Array.lorem(5, '1')); // ['1', '1', '1', '1', '1'];\n  //  *\n  //  * console.log(Array.lorem(5, {type: 'a', value: 1}));\n  //  * // it logs\n  //  * [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1}\n  //  * ];\n  //  *\n  //  * console.log(Array.lorem(5, function(index) {\n  //  *   return {\n  //  *     type: 'a',\n  //  *     value: index,\n  //  *   };\n  //  * });\n  //  * // it logs\n  //  * [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 2},\n  //  *   {type: 'a', value: 3},\n  //  *   {type: 'a', value: 4},\n  //  *   {type: 'a', value: 5}\n  //  * ];\n  //  *\n  //  * @memberOf array\n  //  * @method lorem\n  //  * @instance\n  //  * @param {number} items\n  //  * @param {function|object} [model=false]\n  //  * @return {array}\n  //  */\n  // lorem(items, model = false) {\n  //   return Array.prototype.lorem.call(items, model);\n  // },\n\n  // /**\n  //  * flattens array a single level deep,<br>\n  //  * or with deep parameter (true boolean) recursively flattens array,<br>\n  //  * or with deep parameter (number) you specify the recursion depth\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, [2, [3, [4]], 5]];\n  //  *\n  //  * console.log(Array.flatten(a)); // [1, 2, [3, [4]], 5]\n  //  * console.log(Array.flatten(a, 1)); // same as above\n  //  * console.log(a.flatten()); // same as above\n  //  * console.log(a.flatten(1)); // same as above\n  //  *\n  //  * console.log(Array.flatten(a, true)); // [1, 2, 3, 4, 5]\n  //  * console.log(a.flatten(true)); // same as above\n  //  *\n  //  * console.log(Array.flatten(a, 2)); // [1, 2, 3, [4], 5]\n  //  * console.log(a.flatten(2)); // same as above\n  //  *\n  //  * console.log(Array.flatten(a, 3)); // [1, 2, 3, 4, 5]\n  //  * console.log(a.flatten(3)); // same as above\n  //  * @memberOf array\n  //  * @method flatten\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {boolean|number} [deep=false] - the deep (boolean) or depth (number) parameter specifies to do a full recursion or the recursion depth\n  //  * @return {array}\n  //  */\n  // flatten(a, deep = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.flatten.call(a, deep);\n  //   }\n\n  //   return a;\n  // },\n  // /**\n  //  * creates an array of shuffled values, using a version of the Fisher-Yates shuffle. (from lodash documentation)\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.shuffle(a)); // [4, 3, 5, 1, 2]\n  //  * console.log(a.shuffle()); // same as above (or another randomization ;-)\n  //  * @memberOf array\n  //  * @method shuffle\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // shuffle(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.shuffle.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * splits an array in n-pieces chunks\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.split(a)); // []\n  //  * console.log(a.split()); // same as above\n  //  *\n  //  * console.log(Array.split(a, 1)); // [[1], [2], [3], [4], [5]]\n  //  * console.log(a.split(1)); // same as above\n  //  *\n  //  * console.log(Array.split(a, 2)); // [[1, 2], [3, 4], [5]]\n  //  * console.log(a.split(2)); // same as above\n  //  *\n  //  * console.log(Array.split(a, 3)); // [[1, 2, 3], [4, 5]]\n  //  * console.log(a.split(3)); // same as above\n  //  * @memberOf array\n  //  * @method split\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {number} [n=0] - the n pieces of chunks you want\n  //  * @return {array}\n  //  */\n  // split(a, n = 0) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.split.call(a, n);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * reverses an array, with optional clone parameter to avoid original array mutation\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.reverse(a)); // [5, 4, 3, 2, 1]\n  //  * console.log(a.reverse()); // same as above\n  //  *\n  //  * console.log(a === [5, 4, 3, 2, 1]); // true\n  //  *\n  //  * var b = Array.reverse(a, true); // or var b = a.reverse(true);\n  //  *\n  //  * console.log(a); // [1, 2, 3, 4, 5]\n  //  * console.log(b); // [5, 4, 3, 2, 1]\n  //  * @memberOf array\n  //  * @method tail\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {boolean} [clone=false]\n  //  * @return {array}\n  //  */\n  // reverse(a, clone = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.reverse.call(a, clone);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns a sliced array with all elements but the first item\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.tail(a)); // [2, 3, 4, 5]\n  //  * console.log(a.tail()); // same as above\n  //  * @memberOf array\n  //  * @method tail\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // tail(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.tail.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns a sliced array with all elements but the last item\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.cut(a)); // [1, 2, 3, 4]\n  //  * console.log(a.cut()); // same as above\n  //  * @memberOf array\n  //  * @method cut\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // cut(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.cut.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * clones an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 8},\n  //  *   {type: 'c', value: 5},\n  //  *   {type: 'd', value: 7},\n  //  *   {type: 'e', value: 9},\n  //  *   {type: 'f', value: 3},\n  //  * ];\n  //  *\n  //  * var clone = Array.clone(collection); // or var clone = collection.clone();\n  //  *\n  //  * console.log(collection === clone); // false;\n  //  * @memberOf array\n  //  * @method clone\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // clone(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.clone.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * finds max value by propName in a collection array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 8},\n  //  *   {type: 'c', value: 5},\n  //  *   {type: 'd', value: 7},\n  //  *   {type: 'e', value: 9},\n  //  *   {type: 'f', value: 3},\n  //  * ];\n  //  *\n  //  * console.log(Array.maxBy(a, 'value')); // {type:'e', value: 9}\n  //  * console.log(Array.maxBy(a, 'type')); // {type:'f', value: 3}\n  //  *\n  //  * console.log(a.maxBy('value')); // {type:'e', value: 9}\n  //  * console.log(a.maxBy('type')); // {type:'f', value: 3}\n  //  * @memberOf array\n  //  * @method maxBy\n  //  * @instance\n  //  * @param {array} a - the array to check for max value\n  //  * @param {string} [propName=null] - the property name to use for comparation\n  //  * @return {object}\n  //  */\n  // maxBy(a, propName) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.maxBy.call(a, propName);\n  //   }\n\n  //   return a;\n  // },\n};\n","import './Core/index';\nimport Extensions from './Extensions/index';\n\n/**\n * constructs Flavor class & extends the js natives\n * @class Flavor\n * @classdesc Flavor the definitive JS natives chainable extensions methods\n * @public\n */\nexport default class Flavor {\n  constructor() {\n    this.init();\n  }\n\n  /**\n   * safe js native prototype extension using Object.defineProperty\n   * @memberOf Flavor\n   * @method extendProp\n   * @instance\n   * @param {prototype|object} target - the prototype/object to extend\n   * @param {string} prop - the name of the property to be defined or modified\n   * @param {*} val - val to be used as value in the descriptor for the property, can be any kind of native (number, function, etc...) or what you want\n   * @param {object} [options={}] - options to be used as parameters in the descriptor for the property<br>\n   * possible options are (source documentation from <a href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/object/defineProperty\" target=\"_blank\">Javascript|MDN docs</a>)<br>\n   * @param {boolean} [options.configurable=true] configurable - true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding Object.\n   * @param {boolean} [options.enumerable=false] enumerable - true if and only if this property shows up during enumeration of the properties on the corresponding Object.\n   * @param {boolean} [options.writable=true] writable - true if and only if the value associated with the property may be changed with an assignment operator.\n   * @param {function} [options.get=undefined] get - A function which serves as a getter for the property, or undefined if there is no getter. The function return will be used as the value of property.<br>\n   * for example...<br>\n   * <pre>\n   * function ClassName() {\n   *   var privateProp = null;\n   *\n   *   Object.defineProperty(this, 'publicProp', {\n   *     get: function() {\n   *       return privateProp;\n   *     }\n   *   });\n   * }\n   * </pre>\n   * @param {function} [options.set=undefined] set - A function which serves as a setter for the property, or undefined if there is no setter. The function will receive as only argument the new value being assigned to the property.<br>\n   * for example...<br>\n   * <pre>\n   * function ClassName() {\n   *   var privateProp = null;\n   *\n   *   Object.defineProperty(this, 'publicProp', {\n   *     set: function(value) {\n   *       privateProp = value;\n   *     }\n   *   });\n   * }\n   * </pre>\n   */\n  extendProp(target, prop, val, options = {}) {\n    Object.defineProperty(target, prop, {\n      value: val,\n      writable: options.writable || true,\n      configurable: options.configurable || true,\n      enumerable: options.enumerable || false,\n    });\n  }\n\n  /**\n   * merges all keys in extend plain object to the prototype (\n   * @memberOf Flavor\n   * @method extendProps\n   * @instance\n   * @param {prototype|object} target - the prototype/object to extend\n   * @param {object} extensions - the extend object to be merged in prototype\n   */\n  extendProps(target, extensions) {\n    Object.defineProperties(target, extensions);\n  }\n\n  /**\n   * extendObject\n   * @memberOf Flavor\n   * @method extendObject\n   * @instance\n   */\n  extendObject() {\n    this.extendProps(Object.prototype, Extensions.Object.prototype);\n    this.extendProps(Object, Extensions.Object.native);\n  }\n\n  /**\n   * extendFunction\n   * @memberOf Flavor\n   * @method extendFunction\n   * @instance\n   */\n  extendFunction() {\n    this.extendProps(Function.prototype, Extensions.Function.prototype);\n    this.extendProps(Function, Extensions.Function.native);\n  }\n\n  /**\n   * extendBoolean\n   * @memberOf Flavor\n   * @method extendBoolean\n   * @instance\n   */\n  extendBoolean() {\n    this.extendProps(Boolean.prototype, Extensions.Boolean.prototype);\n    this.extendProps(Boolean, Extensions.Boolean.native);\n  }\n\n  /**\n   * extendNumber\n   * @memberOf Flavor\n   * @method extendNumber\n   * @instance\n   */\n  extendNumber() {\n    this.extendProps(Number.prototype, Extensions.Number.prototype);\n    this.extendProps(Number, Extensions.Number.native);\n  }\n\n  /**\n   * extendDate\n   * @memberOf Flavor\n   * @method extendDate\n   * @instance\n   */\n  extendDate() {\n    this.extendProps(Date.prototype, Extensions.Date.prototype);\n    this.extendProps(Date, Extensions.Date.native);\n  }\n\n  /**\n   * extendString\n   * @memberOf Flavor\n   * @method extendString\n   * @instance\n   */\n  extendString() {\n    this.extendProps(String.prototype, Extensions.String.prototype);\n    this.extendProps(String, Extensions.String.native);\n  }\n\n  /**\n   * extendArray\n   * @memberOf Flavor\n   * @method extendArray\n   * @instance\n   */\n  extendArray() {\n    this.extendProps(Array.prototype, Extensions.Array.prototype);\n    this.extendProps(Array, Extensions.Array.native);\n  }\n\n  /**\n   * initialize all\n   * @memberOf Flavor\n   * @method init\n   * @instance\n   */\n  init() {\n    this.extendObject();\n    this.extendFunction();\n    this.extendBoolean();\n    this.extendNumber();\n    this.extendDate();\n    this.extendString();\n    this.extendArray();\n\n    console.warn('FlavorJS initialized');\n  }\n}\n"],"names":["hasOwnProperty","hasDontEnumBug","dontEnums","dontEnumsLength","trueTypeOf","obj","Object","prototype","toString","call","slice","toLowerCase","isUndefined","any","isObject","isFunction","isNumber","isDate","isString","isArray","objectErrorHandler","objs","forEach","Error","functionErrorHandler","fns","fn","stringErrorHandler","strs","str","arrayErrorHandler","arrs","arr","entries","defineProperty","configurable","enumerable","writable","value","ownProps","keys","i","length","resArray","Array","Reflect","ownKeys","reduce","descriptors","key","getOwnPropertyDescriptor","assign","target","firstSource","TypeError","to","arguments","nextSource","keysArray","nextIndex","len","nextKey","desc","undefined","defineProperties","properties","_typeof","property","descriptor","getter","get","setter","set","convertToDescriptor","propertyIsEnumerable","prop","result","push","filter","f","this","t","fun","res","thisArg","val","map","iterator","includes","valueToFind","fromIndex","o","x","y","n","k","Math","max","abs","isNaN","callback","every","callbackfn","T","O","kValue","String","search","start","indexOf","toCamelCase","s","match","toUpperCase","join","padStart","targetLength","padString","repeat","padEnd","iteratee","scope","window","_this","clone","_this2","merge","mergeObj","acc","a","concat","hasOwnPropertyDeep","path","hasOwnPropertyDeepTest","props","shift","arrIndex","propHasArrayIndex","index","hasArray","replace","brackets","split","sanitized","part","floor","random","parts","omit","omitDeep","segs","last","pop","unsetPath","paths","pick","_this3","selectors","values","selector","prev","cur","_this4","isAsyncFunction","constructor","name","proxy","proxyArgs","func","args","apply","times","reverse","Function","isBoolean","b","isBetween","from","Number","MIN_VALUE","MAX_VALUE","nbrs","nbr","numberErrorHandler","parse","parseInt","toTimestamp","dts","dt","dateErrorHandler","round","d","startDate","endDate","Date","getTime","isPercentage","RegExp","test","toInt","radix","toFloat","parseFloat","pad","chars","GUID","isRegExp","re","difference","symmetric","unique","item","intersection","contains","all","Set","clean","Boolean","numbers","flatten","deep","depth","shuffle","m","chunks","size","ceil","v","head","tail","cut","lorem","items","model","arr1","arr2","Collection","ObjectExt","FunctionExt","BooleanExt","NumberExt","DateExt","StringExt","RegExpExt","ArrayExt","init","options","extensions","extendProps","Extensions","extendObject","extendFunction","extendBoolean","extendNumber","extendDate","extendString","extendArray","console","warn"],"mappings":"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"}