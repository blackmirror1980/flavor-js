{"version":3,"file":"flavor.js","sources":["../src/Core/JSDoc/index.js","../src/Core/Polyfills/Object.js","../src/Helpers/trueTypeOf.js","../src/Core/Polyfills/Array.js","../src/Core/Polyfills/String.js","../src/Core/Polyfills/index.js","../src/Extensions/Object/prototype.js","../src/Extensions/Object/native.js","../src/Extensions/Object/index.js","../src/Extensions/Function/prototype.js","../src/Extensions/Function/native.js","../src/Extensions/Function/index.js","../src/Extensions/Boolean/prototype.js","../src/Extensions/Boolean/native.js","../src/Extensions/Boolean/index.js","../src/Extensions/Number/prototype.js","../src/Extensions/Number/native.js","../src/Extensions/Number/index.js","../src/Extensions/Date/prototype.js","../src/Extensions/Date/native.js","../src/Extensions/Date/index.js","../src/Extensions/String/prototype.js","../src/Extensions/String/native.js","../src/Extensions/String/index.js","../src/Extensions/Array/prototype.js","../src/Extensions/Array/native.js","../src/Extensions/Array/index.js","../src/Extensions/index.js","../src/Flavor.js","../src/index.es.js"],"sourcesContent":["/**\n * @typedef {array|object} collection\n * @description an array or an object to be used as collection\n */\n/**\n * @typedef {object} prototype\n * @description the prototype of a class\n */\n/**\n * @typedef {number} timestamp\n * @description the number that identifies a specific time as a timestamp\n */\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-bitwise */\nif (!Object.entries) {\n  Object.defineProperty(Object, 'entries', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value(obj) {\n      const ownProps = Object.keys(obj);\n      let i = ownProps.length;\n      const resArray = new Array(i); // preallocate the Array\n\n      while (i--) {\n        resArray[i] = [ownProps[i], obj[ownProps[i]]];\n      }\n\n      return resArray;\n    },\n  });\n}\n\nif (!Object.hasOwnProperty('getOwnPropertyDescriptors')) {\n  Object.defineProperty(Object, 'getOwnPropertyDescriptors', {\n    configurable: true,\n    enumerable: true,\n    writable: true,\n    value(obj) {\n      return Reflect.ownKeys(obj).reduce((descriptors, key) => {\n        return Object.defineProperty(descriptors, key, {\n          configurable: true,\n          enumerable: true,\n          writable: true,\n          value: Object.getOwnPropertyDescriptor(obj, key),\n        });\n      }, {});\n    },\n  });\n}\n\nif (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(target, firstSource) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      const to = Object(target);\n\n      for (let i = 1; i < arguments.length; i++) {\n        let nextSource = arguments[i];\n\n        if (nextSource === undefined || nextSource === null) {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        const keysArray = Object.keys(Object(nextSource));\n\n        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n          const nextKey = keysArray[nextIndex];\n          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n\n          if (desc !== undefined && desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n\n      return to;\n    },\n  });\n}\n\nfunction convertToDescriptor(descriptor) {\n  if (typeof descriptor !== 'object' || descriptor === null) {\n    throw new TypeError('desc is not a valid property descriptor');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'enumerable')) {\n    descriptor.enumerable = !!descriptor.enumerable;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'configurable')) {\n    descriptor.configurable = !!descriptor.configurable;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'writable')) {\n    descriptor.writable = !!descriptor.writable;\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'get')) {\n    const getter = descriptor.get;\n\n    if (typeof getter !== 'function' && typeof getter !== 'undefined') {\n      throw new TypeError(`${getter} is not a valid getter`);\n    }\n  }\n\n  if (Object.prototype.hasOwnProperty.call(descriptor, 'set')) {\n    const setter = descriptor.set;\n\n    if (typeof setter !== 'function' && typeof setter !== 'undefined') {\n      throw new TypeError(`${setter} is not a valid setter`);\n    }\n  }\n\n  if (('get' in descriptor || 'set' in descriptor) && ('value' in descriptor || 'writable' in descriptor)) {\n    throw new TypeError('descriptor is not valid due to getter/setter presence along value/writable presence');\n  }\n\n  return descriptor;\n}\n\nif (!Object.defineProperties) {\n  Object.defineProperty(Object, 'defineProperties', {\n    configurable: true,\n    enumerable: false,\n    writable: true,\n    value(obj, properties) {\n      if (typeof obj !== 'object' || obj === null) {\n        throw new TypeError('obj is not an object');\n      }\n\n      properties = Object(properties);\n\n      Object.entries(properties).forEach((property) => {\n        Object.defineProperty(obj, property[0], convertToDescriptor(property[1]));\n      });\n\n      return obj;\n    },\n  });\n}\n","// THANKS TO https://gomakethings.com/true-type-checking-with-vanilla-js/\nexport default function trueTypeOf(obj) {\n  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase();\n}\n\n// Object.prototype.toString.call([]); // [object Array]\n// Object.prototype.toString.call({}); // [object Object]\n// Object.prototype.toString.call(''); // [object String]\n// Object.prototype.toString.call(new Date()); // [object Date]\n// Object.prototype.toString.call(1); // [object Number]\n// Object.prototype.toString.call(function () {}); // [object Function]\n// Object.prototype.toString.call(/test/i); // [object RegExp]\n// Object.prototype.toString.call(true); // [object Boolean]\n// Object.prototype.toString.call(null); // [object Null]\n// Object.prototype.toString.call(); // [object Undefined]\n","import { trueTypeOf } from '../../Helpers/index';\n\n/* eslint-disable prefer-destructuring */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-bitwise */\n/**\n * Array.isArray() polyfill\n */\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nif (!Array.isArray) {\n  Object.defineProperty(Array, 'isArray', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(arr) {\n      return trueTypeOf(arr) === 'array';\n    },\n  });\n}\n\nif (!Array.prototype.filter) {\n  Object.defineProperty(Array.prototype, 'filter', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(f) {\n      if (this === undefined || this === null) {\n        throw new TypeError();\n      }\n\n      const t = Object(this);\n      const len = t.length >>> 0;\n      if (typeof fun !== 'function') {\n        throw new TypeError();\n      }\n\n      const res = [];\n      const thisArg = arguments.length >= 2 ? arguments[1] : undefined;\n\n      let val = null;\n\n      for (let i = 0; i < len; i++) {\n        if (i in t) {\n          val = t[i];\n          // NOTE: Technically this should Object.defineProperty at\n          //       the next index, as push can be affected by\n          //       properties on Object.prototype and Array.prototype.\n          //       But that method's new, and collisions should be\n          //       rare, so use the more-compatible alternative.\n          if (f.call(thisArg, val, i, t)) {\n            res.push(val);\n          }\n        }\n      }\n\n      return res;\n    },\n  });\n}\n\nif (!Array.prototype.map) {\n  Object.defineProperty(Array.prototype, 'map', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(arr, iterator) {\n      const result = [];\n\n      for (let i = 0; i < arr.length; i += 1) {\n        result.push(iterator(arr[i]));\n      }\n\n      return result;\n    },\n  });\n}\n\nif (!Array.prototype.includes) {\n  Object.defineProperty(Array.prototype, 'includes', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(valueToFind, fromIndex) {\n      if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      const o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      const len = o.length >>> 0;\n\n      // 3. If len is 0, return false.\n      if (len === 0) {\n        return false;\n      }\n\n      // 4. Let n be ? ToInteger(fromIndex).\n      //    (If fromIndex is undefined, this step produces the value 0.)\n      const n = fromIndex | 0;\n\n      // 5. If n â‰¥ 0, then\n      //  a. Let k be n.\n      // 6. Else n < 0,\n      //  a. Let k be len + n.\n      //  b. If k < 0, let k be 0.\n      let k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n      function sameValueZero(x, y) {\n        return x === y || (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y));\n      }\n\n      // 7. Repeat, while k < len\n      while (k < len) {\n        // a. Let elementK be the result of ? Get(O, ! ToString(k)).\n        // b. If SameValueZero(valueToFind, elementK) is true, return true.\n        if (sameValueZero(o[k], valueToFind)) {\n          return true;\n        }\n        // c. Increase k by 1.\n        k++;\n      }\n\n      // 8. Return false\n      return false;\n    },\n  });\n}\n\n// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: http://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      const o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      const len = o.length >>> 0;\n\n      // Steps 3, 4, 5, 6, 7\n      let k = 0;\n      let value;\n\n      if (arguments.length === 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++;\n        }\n\n        // 3. If len is 0 and initialValue is not present, throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i. Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(callbackfn, undefined, Â« accumulator, kValue, k, O Â»).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    },\n  });\n}\n","/* eslint-disable prefer-destructuring */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable no-restricted-globals */\n/* eslint-disable no-bitwise */\nif (!String.prototype.includes) {\n  Object.defineProperty(String.prototype, 'includes', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value(search, start) {\n      start = (typeof start !== 'number') ? 0 : start;\n\n      if (start + search.length > this.length) {\n        return false;\n      }\n\n      return this.indexOf(search, start) !== -1;\n    },\n  });\n}\n\nif (!String.prototype.toCamelCase) {\n  Object.defineProperty(String.prototype, 'toCamelCase', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value() {\n      const s = this && this.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g).map(x => x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase()).join('');\n      return s.slice(0, 1).toLowerCase() + s.slice(1);\n    },\n  });\n}\n","import './Object';\nimport './Array';\nimport './String';\n\n// check if needed https://github.com/airbnb/js-shims\n","/**\n * @namespace object\n * @description extensions for the JS primitive Object\n */\nexport default {\n};\n","/**\n * @namespace object\n * @description extensions for the JS primitive Object\n */\nexport default {\n};\n","/**\n * @namespace object\n * @description extensions for the JS primitive Object\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace function\n * @description extensions for the JS primitive Function\n */\nexport default {\n};\n","/**\n * @namespace function\n * @description extensions for the JS primitive Function\n */\nexport default {\n};\n","/**\n * @namespace function\n * @description extensions for the JS primitive Function\n */\n\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace boolean\n * @description extensions for the JS primitive Boolean\n */\nexport default {\n};\n","import { trueTypeOf } from '../../Helpers/index';\n/**\n * @namespace boolean\n * @description extensions for the JS primitive Boolean\n */\nexport default {\n  /**\n   * isBoolean\n   * @example <caption>eg. usage</caption>\n   * var b = true;\n   *\n   * console.log(Boolean.isBoolean(b)); // true\n   *\n   * console.log(Boolean.isBoolean(2)); // false\n   *\n   * console.log(Boolean.isBoolean(false)); // true\n   *\n   * console.log(Boolean.isBoolean(null)); // false\n   * @memberOf boolean\n   * @method isBoolean\n   * @instance\n   * @return {boolean}\n   */\n  isBoolean(b) {\n    return trueTypeOf(b) === 'boolean';\n  },\n  /**\n   * randomizes a boolean value\n   * @example <caption>eg. usage</caption>\n   * console.log(Boolean.random()); // it logs true or false\n   * @memberOf boolean\n   * @method random\n   * @instance\n   * @return {boolean}\n   */\n  random() {\n    return Math.random() >= 0.5;\n  },\n};\n","/**\n * @namespace boolean\n * @description extensions for the JS primitive Boolean\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace number\n * @description extensions for the JS primitive Number\n */\nexport default {\n};\n","/**\n * @namespace number\n * @description extensions for the JS primitive Number\n */\nexport default {\n};\n","/**\n * @namespace number\n * @description extensions for the JS primitive Number\n */\n\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace date\n * @description extensions for the JS primitive Date\n */\nexport default {\n};\n","/**\n * @namespace date\n * @description extensions for the JS primitive Date\n */\nexport default {\n};\n","/**\n * @namespace date\n * @description extensions for the JS primitive Date\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace string\n * @description extensions for the JS primitive String\n */\nexport default {\n};\n","/**\n * @namespace string\n * @description extensions for the JS primitive String\n */\nexport default {\n};\n","/**\n * @namespace string\n * @description extensions for the JS primitive String\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nexport default {\n  //TODO: implement rest arrays difference\n  difference(arr, symmetric = true) {\n    if (!!symmetric) {\n      return Array.prototype.unique.call([\n        ...this.filter(item => !arr.includes(item)),\n        ...arr.filter(item => !this.includes(item)),\n      ]);\n    }\n\n    return this.filter(item => !arr.includes(item));\n  },\n  // //TODO: implement rest arrays intersection\n  // intersection(arr) {\n  //   return this.filter(item => arr.includes(item));\n  // },\n  // contains(any, all = true) {\n  //   if (Array.isArray(any)) {\n  //     if (!all) {\n  //       return Array.prototype.intersection.call(this, any).length > 0;\n  //     }\n\n  //     return Array.prototype.difference.call(this, any).length === 0;\n  //   }\n\n  //   return Array.prototype.includes.call(this, any);\n  // },\n  // unique() {\n  //   return [...new Set(this)];\n  // },\n  // sortBy(propNames, propDirections) {\n  //   if (String.isString(propNames)) {\n  //     propNames = [propNames];\n  //   }\n\n  //   if (!!propDirections) {\n  //     if (String.isString(propDirections)) {\n  //       propDirections = [propDirections];\n  //     }\n  //   } else {\n  //     propDirections = propNames.map(() => {\n  //       return 'asc';\n  //     });\n  //   }\n\n  //   return _.orderBy(this, propNames, propDirections);\n  // },\n\n  // deepSortBy(propNames, propDirections = null, childrenPropName = 'children') {\n  //   if (String.isString(propNames)) {\n  //     propNames = [propNames];\n  //   }\n\n  //   if (!!propDirections) {\n  //     if (String.isString(propDirections)) {\n  //       propDirections = [propDirections];\n  //     }\n  //   } else {\n  //     propDirections = propNames.map(() => {\n  //       return 'asc';\n  //     });\n  //   }\n\n  //   return _.deepOrderBy(this, propNames, propDirections, childrenPropName);\n  // },\n\n  // filterBy(propNames, propValues) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propNames)) {\n  //     predicate = propNames;\n  //     return _.filter(this, predicate);\n  //   } else if (Array.isArray(propValues)) {\n  //     return _.filterByValues(this, propNames, propValues);\n  //   }\n\n  //   predicate = {};\n  //   predicate[propNames] = propValues;\n  //   return _.filter(this, predicate) || [];\n  // },\n\n  // pull(item) {\n  //   return _.pull(this, item);\n  // },\n\n  // pullBy(propName, propValue) {\n  //   if (Array.isArray(propName) && _.isFunction(propValue)) {\n  //     const values = propName;\n  //     const comparator = propValue;\n  //     return _.pullAllByComparator(this, values, comparator);\n  //   }\n\n  //   const predicate = {};\n  //   predicate[propName] = propValue;\n  //   return _.pullAllBy(this, [predicate]);\n  // },\n\n  // findBy(propName, propValue = null, reverse = false) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (predicate) {\n  //     if (reverse) {\n  //       return _.findLast(this, predicate);\n  //     }\n\n  //     return _.find(this, predicate);\n  //   }\n\n  //   return null;\n  // },\n\n  // deepFindBy(propName, propValue = null, childrenPropName = 'children') {\n  //   return _.deepFindBy(this, propName, propValue, childrenPropName);\n  // },\n\n  // indexBy(propName, propValue, reverse = false) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (predicate) {\n  //     if (reverse) {\n  //       return _.findLastIndex(this, predicate);\n  //     }\n\n  //     return _.findIndex(this, predicate);\n  //   }\n\n  //   return null;\n  // },\n\n  // containsBy(propName, propValue) {\n  //   return this.findBy(propName, propValue) !== undefined;\n  // },\n\n  // countBy(propName, propValue, falseValues) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName) || Object.isObject(propName)) {\n  //     predicate = propName;\n  //   } else if (String.isString(propName)) {\n  //     predicate = {};\n  //     predicate[propName] = propValue;\n  //   }\n\n  //   if (!!predicate) {\n  //     return _.countBy(this, predicate)[!!falseValues ? 'false' : 'true'];\n  //   }\n\n  //   return 0;\n  // },\n\n  // union(...arrays) {\n  //   return _.unionWith(this, ...arrays, _.isEqual);\n  // },\n\n  // random(weightField = null, valueField = null) {\n  //   if (!!weightField) {\n  //     return this.map((item) => {\n  //       return _.times(item[weightField || 'weight'], () => {\n  //         if (!!valueField) {\n  //           return item[valueField || 'value'];\n  //         }\n\n  //         return _.omit(item, weightField);\n  //       });\n  //     }).flatten().shuffle().first();\n  //   }\n\n  //   return _.sample(this);\n  // },\n\n  // each(iteratee, reverse = false) {\n  //   if (!!reverse) {\n  //     return _.eachRight(this, iteratee);\n  //   }\n\n  //   return _.each(this, iteratee);\n  // },\n\n  // first(propName, propValue) {\n  //   let a = this;\n\n  //   if (!!propName) {\n  //     a = this.filterBy(propName, propValue);\n  //   }\n\n  //   return _.first(a);\n  // },\n\n  // last(propName, propValue) {\n  //   let a = this;\n\n  //   if (!!propName) {\n  //     a = this.filterBy(propName, propValue);\n  //   }\n\n  //   return _.last(a);\n  // },\n\n  // sum(propName, startValue = 0) {\n  //   let predicate = null;\n\n  //   if (Function.isFunction(propName)) {\n  //     predicate = propName;\n  //   } else {\n  //     predicate = (acc, item) => {\n  //       return acc + item[propName];\n  //     };\n  //   }\n\n  //   return _.reduce(this, predicate, startValue);\n  // },\n\n  // deepMap(childrenPropName = 'children', iteratee) {\n  //   return _.deepMap(this, childrenPropName, iteratee);\n  // },\n\n  // lorem(items, model = false) {\n  //   return Number.times(items, (i) => {\n  //     if (!!model) {\n  //       return Function.isFunction(model) ? model(i) : model;\n  //     }\n\n  //     return i;\n  //   });\n  // },\n\n  // flatten(deep) {\n  //   if (!!deep) {\n  //     if (Number.isNumber(deep)) {\n  //       return _.flattenDepth(this, deep);\n  //     } else if (Boolean.isBoolean(deep)) {\n  //       return _.flattenDeep(this);\n  //     }\n  //   }\n\n  //   return _.flatten(this);\n  // },\n\n  // shuffle() {\n  //   return _.shuffle(this);\n  // },\n\n  // split(n = 0) {\n  //   return _.chunk(this, n);\n  // },\n\n  // reverse(clone = false) {\n  //   if (!!clone) {\n  //     return _.reverse(_.clone(this));\n  //   }\n\n  //   return _.reverse(this);\n  // },\n\n  // tail() {\n  //   return _.tail(this);\n  // },\n\n  // cut() {\n  //   return _.initial(this);\n  // },\n\n  // clone() {\n  //   return [...this];\n  // },\n\n  // maxBy(propName = null) {\n  //   if (propName) {\n  //     return _.maxBy(this, propName);\n  //   }\n\n  //   return null;\n  // },\n};\n","/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nexport default {\n  /**\n   * return a new array containing the difference between two arrays\n   * @example <caption>eg. usage</caption>\n   * var arr1 = ['a', 'e', 'i', 'o', 'u'];\n   * var arr2 = ['a', 'd', 'f', 'o', 'u'];\n   *\n   * console.log(Array.difference(arr1, arr2)); // ['d', 'e', 'f', 'i']\n   * console.log(Array.difference(arr1, arr2, false)); // ['e', 'i']\n   *\n   * console.log(arr1.difference(arr2)); // ['d', 'e', 'f', 'i']\n   * console.log(arr1.difference(arr2, false)); // ['e', 'i']\n   * @memberOf array\n   * @method difference\n   * @instance\n   * @param {array} arr1 - the first array\n   * @param {array} arr2 - the second array\n   * @param {boolean} symmetric - if true does the real difference between both of the two arrays\n   * @return {boolean}\n   */\n  difference(arr1, arr2, symmetric = true) {\n    if (Array.isArray(arr1) && Array.isArray(arr2)) {\n      return Array.prototype.difference.call(arr1, arr2, symmetric);\n    }\n\n    return [];\n  },\n\n  // /**\n  //  * return a new array containing the intersection between two arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var arr1 = ['a', 'e', 'i', 'o', 'u'];\n  //  * var arr2 = ['a', 'd', 'f', 'o', 'u'];\n  //  *\n  //  * console.log(Array.intersection(arr1, arr2)); // ['a', 'o', 'u']\n  //  *\n  //  * console.log(arr1.intersection(arr2)); // ['a', 'o', 'u']\n  //  * @memberOf array\n  //  * @method intersection\n  //  * @instance\n  //  * @param {array} arr1 - the first array\n  //  * @param {array} arr2 - the second array\n  //  * @return {boolean}\n  //  */\n  // intersection(arr1, arr2) {\n  //   if (Array.isArray(arr1) && Array.isArray(arr2)) {\n  //     return Array.prototype.intersection.call(arr1, arr2);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * returns a new unique items array from an array<br><br>\n  //  * @example <caption>eg. usage</caption>\n  //  * var arr = ['a', 'a', 'e', 'i', 'o', 'u'];\n  //  *\n  //  * console.log(Array.unique(arr); // ['a', 'e', 'i', 'o', 'u']\n  //  * console.log(arr.unique(); // ['a', 'e', 'i', 'o', 'u']\n  //  * @memberOf array\n  //  * @method unique\n  //  * @instance\n  //  * @param {array} a - the array to be uniqued\n  //  * @return {array}\n  //  */\n  // unique(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.unique.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * checks if an Array contains something\n  //  * @example <caption>eg. usage</caption>\n  //  * var arr = ['a', 'e', 'i', 'o', 'u'];\n  //  *\n  //  * console.log(Array.contains(arr, 'b')); // false\n  //  * console.log(Array.contains(arr, 'a')); // true\n  //  * console.log(Array.contains(arr, ['a', 'b', 'e']); // true\n  //  * console.log(Array.contains(arr, ['a', 'b', 'e'], true); // false\n  //  *\n  //  * console.log(arr.contains('b')); // false\n  //  * console.log(arr.contains('a')); // true\n  //  * console.log(arr.contains(['a', 'b', 'e']); // true\n  //  * console.log(arr.contains(['a', 'b', 'e'], true); // false\n  //  * @memberOf array\n  //  * @method contains\n  //  * @instance\n  //  * @param {array} a - the array to be checked\n  //  * @param {array|*} item - can be anything or an array of anything\n  //  * @param {boolean} [all=false] - specify to check if the array must contain all items\n  //  * @return {boolean}\n  //  */\n  // contains(a, item, all = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.contains.call(a, item, all);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * creates an array of unique array values not included in the other provided arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var arr = ['a', 'e', 'i', 'o', 'u'];\n  //  * var arr2 = ['a', 'b', 'c', 'd', 'e'];\n  //  *\n  //  * console.log(Array.diff(arr, arr2)); // ['i', 'o', 'u']\n  //  * console.log(arr.diff(arr2)); // same as above\n  //  *\n  //  * console.log(Array.diff(arr2, arr)); // ['b', 'c', 'd']\n  //  * console.log(arr2.diff(arr)); // same as above\n  //  *\n  //  * var collection = [{id: 1, type: 'a'}, {id: 2, type: 'e'}, {id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}];\n  //  * var collection2 = [{id: 1, type: 'a'}, {id: 2, type: 'b'}, {id: 3, type: 'c'}, {id: 4, type: 'd'}, {id: 5, type: 'e'}];\n  //  *\n  //  * console.log(Array.diff(collection, collection2)); // [{id: 2, type: 'e'}, {id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}]\n  //  * console.log(collection.diff(collection2)); // same as above\n  //  *\n  //  * console.log(Array.diff(collection, collection2, 'type'); // [{id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}]\n  //  * console.log(collection.diff(collection2, 'type'); // same as above\n  //  *\n  //  * console.log(Array.diff(collection, collection2, function(aitem, bitem) {\n  //  *   return aitem.type === bitem.type;\n  //  * })); // same as above\n  //  *\n  //  * console.log(collection.diff(collection2, function(aitem, bitem) {\n  //  *   return aitem.type === bitem.type;\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method diff\n  //  * @instance\n  //  * @param {array} a - the first array to use for the diff\n  //  * @param {array} b - the second array to use for the diff\n  //  * @param {function|string} [fn=null] - function to use as comparator for the diff or the propname to check for the equality or nothing for standard equality<br>\n  //  * the function will be invoked with an item from the first array and an item from the second array,<br>\n  //  * so the function has to look like this<br>\n  //  * <pre>\n  //  * function(aitem, bitem) {}\n  //  * </pre>\n  //  * @param {object|any} fn.aitem - the item from the first array\n  //  * @param {object|any} fn.bitem - the item from the second array\n  //  * @return {array}\n  //  */\n  // diff(a, b, fn = null) {\n  //   if (Array.isArray(a) && Array.isArray(b)) {\n  //     return Array.prototype.diff.call(a, b, fn);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * creates an array of unique array values not included in the other provided arrays based on a field equality (aliases Array.diff)\n  //  * @example <caption>eg. usage</caption>\n  //  * @memberOf array\n  //  * @method diffBy\n  //  * @instance\n  //  * @param {array} a - the first array to use for the diff\n  //  * @param {array} b - the second array to use for the diff\n  //  * @param {string} propName - the property name to be used in comparator for the diff\n  //  * @return {array|null}\n  //  */\n  // diffBy(a, b, propName) {\n  //   if (Array.isArray(a) && Array.isArray(b)) {\n  //     return Array.diff(a, b, propName);\n  //   }\n\n  //   return null;\n  // },\n\n  // /**\n  //  * sorts an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {id: 1, type: 'a'},\n  //  *   {id: 3, type: 'i'},\n  //  *   {id: 5, type: 'u'},\n  //  *   {id: 4, type: 'o'},\n  //  *   {id: 2, type: 'e'}\n  //  * ];\n  //  *\n  //  * console.log(Array.sortBy(collection, 'type')); // [{id: 1, type: 'a'}, {id: 2, type: 'e'}, {id: 3, type: 'i'}, {id: 4, type: 'o'}, {id: 5, type: 'u'}]\n  //  * console.log(collection.sortBy('type')); // same as above\n  //  *\n  //  * console.log(Array.sortBy(collection, 'id', 'desc')); // [{id: 5, type: 'u'}, {id: 4, type: 'o'}, {id: 3, type: 'i'}, {id: 2, type: 'e'}, {id: 1, type: 'a'}]\n  //  * console.log(collection.softBy('id', 'desc')); // same as above\n  //  *\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.sortBy(collection, ['type', 'value']));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * // ];\n  //  *\n  //  * console.log(collection.sortBy(['type', 'value'])); // same as above\n  //  *\n  //  * console.log(Array.sortBy(collection, ['type', 'value'], ['asc', 'desc']));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * // ];\n  //  *\n  //  * console.log(collection.sortBy(['type', 'value'], ['asc', 'desc'])); // same as above\n  //  * @memberOf array\n  //  * @method sortBy\n  //  * @instance\n  //  * @param {array} a - the array to be sorted\n  //  * @param {array|string} propNames - the propName(s) you want to use for sorting\n  //  * @param {array|string|null} [propDirections=null] - the propDirection(s) you want to use for sorting (respect propName(s) order)\n  //  * @return {array}\n  //  */\n  // sortBy(a, propNames, propDirections = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.sortBy.call(a, propNames, propDirections);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * deeply sorts an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'b', value: 'b', items: [\n  //  *     {type: 'b', value: 'b-1'},\n  //  *     {type: 'b', value: 'b-5'},\n  //  *     {type: 'b', value: 'b-2'},\n  //  *     {type: 'b', value: 'b-4'},\n  //  *     {type: 'b', value: 'b-3'},\n  //  *   ]},\n  //  *   {type: 'd', value: 'd'},\n  //  *   {type: 'a', value: 'a', items: [\n  //  *     {type: 'a', value: 'a-1', items: [\n  //  *       {type: 'a', value: 'a-1-1'},\n  //  *       {type: 'a', value: 'a-1-3'},\n  //  *       {type: 'a', value: 'a-1-2'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-5', items: [\n  //  *       {type: 'a', value: 'a-5-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-2', items: [\n  //  *       {type: 'a', value: 'a-2-1'},\n  //  *       {type: 'a', value: 'a-2-3'},\n  //  *       {type: 'a', value: 'a-2-2'},\n  //  *       {type: 'a', value: 'a-2-4'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-4', items: [\n  //  *       {type: 'a', value: 'a-4-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-3', items: [\n  //  *       {type: 'a', value: 'a-3-2'},\n  //  *       {type: 'a', value: 'a-3-1'},\n  //  *     ]}},\n  //  *   ]},\n  //  *   {type: 'c', value: 'c', items: []},\n  //  * ];\n  //  *\n  //  * console.log(Array.deepSortBy(collection, ['type', 'value'], ['asc', 'desc'], 'items'));\n  //  * // [\n  //  * //   {type: 'a', value: 'a', items: [\n  //  * //     {type: 'a', value: 'a-5', items: [\n  //  * //       {type: 'a', value: 'a-5-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-4', items: [\n  //  * //       {type: 'a', value: 'a-4-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-3', items: [\n  //  * //       {type: 'a', value: 'a-3-2'},\n  //  * //       {type: 'a', value: 'a-3-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-2', items: [\n  //  * //       {type: 'a', value: 'a-2-4'},\n  //  * //       {type: 'a', value: 'a-2-3'},\n  //  * //       {type: 'a', value: 'a-2-2'},\n  //  * //       {type: 'a', value: 'a-2-1'},\n  //  * //     ]}},\n  //  * //     {type: 'a', value: 'a-1', items: [\n  //  * //       {type: 'a', value: 'a-1-3'},\n  //  * //       {type: 'a', value: 'a-1-2'},\n  //  * //       {type: 'a', value: 'a-1-1'},\n  //  * //     ]}},\n  //  * //   ]},\n  //  * //   {type: 'b', value: 'b', items: [\n  //  * //     {type: 'b', value: 'b-5'},\n  //  * //     {type: 'b', value: 'b-4'},\n  //  * //     {type: 'b', value: 'b-3'},\n  //  * //     {type: 'b', value: 'b-2'},\n  //  * //     {type: 'b', value: 'b-1'},\n  //  * //   ]},\n  //  * //   {type: 'c', value: 'c', items: []},\n  //  * //   {type: 'd', value: 'd'},\n  //  * // ]\n  //  * @memberOf array\n  //  * @method deepSortBy\n  //  * @instance\n  //  * @param {array} a - the array to be sorted\n  //  * @param {array|string} propNames - the propName(s) you want to use for sorting\n  //  * @param {array|string|null} [propDirections=null] - the propDirection(s) you want to use for sorting (respect propName(s) order)\n  //  * @param {string} [childrenPropName='children'] - the childrenPropName to be used for sorting\n  //  * @return {array}\n  //  */\n  // deepSortBy(a, propNames, propDirections = null, childrenPropName = 'children') {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.deepSortBy.call(a, propNames, propDirections, childrenPropName);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * filters an array by propName or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.filterBy(collection, type, 'a'));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.filterBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.filterBy(collection, function(item) {\n  //  *   return item.value.contains('1');\n  //  * }));\n  //  * // [\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.filterBy(function(item) {\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method filterBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} propValue\n  //  * @return {array}\n  //  */\n  // filterBy(a, propName, propValue) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.filterBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * removes an item from an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.pull(collection, {type: 'a', value: 'a'}));\n  //  * // [\n  //  * //   {type: 'a', value: 'a-2-1'},\n  //  * //   {type: 'a', value: 'a-1-3'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * //   {type: 'a', value: 'a-1-1'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.pull({type: 'a', value: 'a'})); // same as above\n  //  * @memberOf array\n  //  * @method pull\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {any} any\n  //  * @return {array}\n  //  */\n  // pull(a, item) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.pull.call(a, item);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * removes an item from an array by propName/propValue pair or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.pullBy(collection, 'type', 'a'));\n  //  * // [\n  //  * //   {type: 'c', value: 'c'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.pullBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.pullBy(collection, function(item) {\n  //  *   return item.value.contains('1');\n  //  * }));\n  //  * // [\n  //  * //   {type: 'a', value: 'a'},\n  //  * //   {type: 'c', value: 'c'},\n  //  * //   {type: 'b', value: 'b'},\n  //  * // ]\n  //  *\n  //  * console.log(collection.pullBy(function(item) {\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method pullBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} propValue\n  //  * @return {array}\n  //  */\n  // pullBy(a, propName, propValue) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.pullBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * finds an item in an array by propName/propValue pair or predicate,\n  //  * returns the first element found respecting the specified predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.findBy(collection, 'type', 'a')); // {type: 'a', value: 'a'}\n  //  * console.log(collection.findBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.findBy(collection, 'type', 'a', true)); // {type: 'a', value: 'a-1-1'}\n  //  * console.log(collection.findBy('type', 'a', true)); // same as above\n  //  *\n  //  * console.log(Array.findBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // {type: 'a', value: 'a-2-1'}\n  //  *\n  //  * console.log(collection.findBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  *\n  //  * console.log(Array.findBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // {type: 'a', value: 'a-1-1'}\n  //  *\n  //  * console.log(collection.findBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method findBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @param {boolean} [reverse=false] - is true specified to search from right to left\n  //  * @return {any|null}\n  //  */\n  // findBy(a, propName, propValue = null, reverse = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.findBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * deeply sorts an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'b', value: 'b', items: [\n  //  *     {type: 'b', value: 'b-1'},\n  //  *     {type: 'b', value: 'b-5'},\n  //  *     {type: 'b', value: 'b-2'},\n  //  *     {type: 'b', value: 'b-4'},\n  //  *     {type: 'b', value: 'b-3'},\n  //  *   ]},\n  //  *   {type: 'd', value: 'd'},\n  //  *   {type: 'a', value: 'a', items: [\n  //  *     {type: 'a', value: 'a-1', items: [\n  //  *       {type: 'a', value: 'a-1-1'},\n  //  *       {type: 'a', value: 'a-1-3'},\n  //  *       {type: 'a', value: 'a-1-2'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-5', items: [\n  //  *       {type: 'a', value: 'a-5-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-2', items: [\n  //  *       {type: 'a', value: 'a-2-1'},\n  //  *       {type: 'a', value: 'a-2-3'},\n  //  *       {type: 'a', value: 'a-2-2'},\n  //  *       {type: 'a', value: 'a-2-4'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-4', items: [\n  //  *       {type: 'a', value: 'a-4-1'},\n  //  *     ]}},\n  //  *     {type: 'a', value: 'a-3', items: [\n  //  *       {type: 'a', value: 'a-3-2'},\n  //  *       {type: 'a', value: 'a-3-1'},\n  //  *     ]}},\n  //  *   ]},\n  //  *   {type: 'c', value: 'c', items: []},\n  //  * ];\n  //  *\n  //  * console.log(Array.deepFindBy(collection, 'value', 'a-2-1', 'items')); // {type: 'a', value: 'a-2-1'}\n  //  * console.log(collection.deepFindBy('value', 'a-2-1', 'items')); // same as above\n  //  *\n  //  * console.log(Array.deepFindBy(collection, function(item) {\n  //  *    return item.value.contains('a-2-1');\n  //  * }, null, 'items')); // {type: 'a', value: 'a-2-1'}\n  //  *\n  //  * console.log(collection.deepFindBy(function(item) {\n  //  *    return item.value.contains('a-2-1');\n  //  * }, null, 'items')); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method deepFindBy\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {string|function} propName - the propName you want to use for the deep find\n  //  * @param {any} [propValue=null] - the propValue you want to use for the deep find\n  //  * @param {string} [childrenPropName='children'] - the childrenPropName to be used for the deep find recursion\n  //  * @return {array}\n  //  */\n  // deepFindBy(a, propName, propValue = null, childrenPropName = 'children') {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.deepFindBy.call(a, propName, propValue, childrenPropName);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * finds the index of an item in an array by propName/propValue pair or predicate,\n  //  * returns the first element found respecting the specified predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  * ];\n  //  *\n  //  * console.log(Array.indexBy(collection, 'type', 'a')); // 0\n  //  * console.log(collection.indexBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.indexBy(collection, 'type', 'a', true)); // 4\n  //  * console.log(collection.indexBy('type', 'a', true)); // same as above\n  //  *\n  //  * console.log(Array.indexBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // 1\n  //  *\n  //  * console.log(collection.indexBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * })); // same as above\n  //  *\n  //  * console.log(Array.indexBy(collection, function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // 4\n  //  *\n  //  * console.log(collection.indexBy(function(item, index, collection){\n  //  *   return item.value.contains('1');\n  //  * }, true)); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method indexBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @param {boolean} [reverse=false] - is true specified to search from right to left\n  //  * @return {any|null}\n  //  */\n  // indexBy(a, propName, propValue, reverse = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.indexBy.call(a, propName, propValue, reverse);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * checks if an array contains an item by propName/propValue pair or predicate,\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  *   {type: 'b', value: 'b-1-1'},\n  //  * ];\n  //  *\n  //  * console.log(Array.containsBy(collection, 'value', 'a-2-2')); // false\n  //  * console.log(collection.containsBy('value', 'a-2-2')); // same as above\n  //  *\n  //  * console.log(Array.containsBy(collection, 'value', 'a-2-1')); // true\n  //  * console.log(collection.containsBy('value', 'a-2-1')); // same as above\n  //  *\n  //  * console.log(Array.containsBy(collection, function(item) {\n  //  *   return item.type === 'c';\n  //  * })); // true\n  //  *\n  //  * console.log(collection.containsBy(function(item) {\n  //  *   return item.type === 'c';\n  //  * })); // same as above\n  //  * @memberOf array\n  //  * @method containsBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @return {any|null}\n  //  */\n  // containsBy(a, propName, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.containsBy.call(a, propName, propValue);\n  //   }\n\n  //   return false;\n  // },\n\n  // /**\n  //  * counts items in array that respects propName/propValue pair or predicate,\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 'a'},\n  //  *   {type: 'a', value: 'a-2-1'},\n  //  *   {type: 'a', value: 'a-1-3'},\n  //  *   {type: 'c', value: 'c'},\n  //  *   {type: 'a', value: 'a-1-1'},\n  //  *   {type: 'b', value: 'b'},\n  //  *   {type: 'b', value: 'b-1-1'},\n  //  * ];\n  //  *\n  //  * console.log(Array.countBy(collection, 'type', 'a')); // 4\n  //  * console.log(collection.countBy('type', 'a')); // same as above\n  //  *\n  //  * console.log(Array.countBy(collection, 'type', 'a', true)); // 3, it counts false values\n  //  * console.log(collection.countBy('type', 'a', true)); // same as above\n  //  *\n  //  * console.log(Array.countBy(collection, function(item) {\n  //  *   return item.type === 'b';\n  //  * })); // 2\n  //  *\n  //  * console.log(collection.countBy(function(item) {\n  //  *   return item.type === 'b';\n  //  * })); // same as above\n  //  *\n  //  * console.log(Array.countBy(collection, function(item) {\n  //  *   return item.type === 'b';\n  //  * }, null, true)); // 5, it counts false values\n  //  *\n  //  * console.log(collection.countBy(function(item) {\n  //  *   return item.type === 'b';\n  //  * }, null, true)); // same as above\n  //  * @memberOf array\n  //  * @method countBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any|null} [propValue=null]\n  //  * @param {boolean} [falseValues=false]\n  //  * @return {number}\n  //  */\n  // countBy(a, propName, propValue = null, falseValues = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.countBy.call(a, propName, propValue, falseValues);\n  //   }\n\n  //   return 0;\n  // },\n\n  // /**\n  //  * returns a new array with the intersection of passed arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  * var b = [1, 4, 5, 7, 8];\n  //  *\n  //  * console.log(Array.intersection(a, b)); // [1, 4, 5]\n  //  * console.log(a.intersection(b)); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 2},\n  //  *   {type: 3, value: 1},\n  //  * ];\n  //  *\n  //  * var b = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 3},\n  //  *   {type: 3, value: 2},\n  //  *   {type: 4, value: 1},\n  //  *   {type: 5, value: 1},\n  //  * ];\n  //  *\n  //  * console.log(Array.intersection(a, b));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * //   {type: 2, value: 1},\n  //  * // ]\n  //  *\n  //  * console.log(a.intersection(b)); // same as above\n  //  *\n  //  * var c = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.intersection(a, b, c));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * // ]\n  //  *\n  //  * console.log(a.intersection(b, c)); // same as above\n  //  *\n  //  * @memberOf array\n  //  * @method intersection\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {...array} arrays\n  //  * @return {any|null}\n  //  */\n  // intersection(a, ...arrays) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.intersection.call(a, ...arrays);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * returns a new array with the union of passed arrays\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  * var b = [1, 4, 5, 7, 8];\n  //  *\n  //  * console.log(Array.union(a, b)); // [1, 2, 3, 4, 5, 7, 8]\n  //  * console.log(a.union(b)); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 2},\n  //  *   {type: 3, value: 1},\n  //  * ];\n  //  *\n  //  * var b = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 2, value: 1},\n  //  *   {type: 2, value: 3},\n  //  *   {type: 3, value: 2},\n  //  *   {type: 4, value: 1},\n  //  *   {type: 5, value: 1},\n  //  * ];\n  //  *\n  //  * console.log(Array.union(a, b));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * //   {type: 1, value: 2},\n  //  * //   {type: 2, value: 1},\n  //  * //   {type: 2, value: 2},\n  //  * //   {type: 3, value: 1},\n  //  * //   {type: 2, value: 3},\n  //  * //   {type: 4, value: 1},\n  //  * //   {type: 5, value: 1},\n  //  * // ]\n  //  *\n  //  * console.log(a.union(b)); // same as above\n  //  *\n  //  * var c = [\n  //  *   {type: 1, value: 1},\n  //  *   {type: 1, value: 2},\n  //  *   {type: 2, value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.union(a, b, c));\n  //  * // [\n  //  * //   {type: 1, value: 1},\n  //  * //   {type: 1, value: 2},\n  //  * //   {type: 2, value: 1},\n  //  * //   {type: 2, value: 2},\n  //  * //   {type: 3, value: 1},\n  //  * //   {type: 2, value: 3},\n  //  * //   {type: 4, value: 1},\n  //  * //   {type: 5, value: 1},\n  //  * //   {type: 2, value: 4},\n  //  * // ]\n  //  *\n  //  * console.log(a.union(b, c)); // same as above\n  //  * @memberOf array\n  //  * @method union\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {...array} arrays\n  //  * @return {any|null}\n  //  */\n  // union(a, ...arrays) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.union.call(a, ...arrays);\n  //   }\n\n  //   return [];\n  // },\n\n  // /**\n  //  * @alias array.pullBy\n  //  * @memberOf array\n  //  * @method removeBy\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} propName\n  //  * @param {any} [propValue=null]\n  //  * @return {array}\n  //  */\n  // removeBy(a, propName, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.pullBy.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * randomizes an item from an array, with optional weight parameters\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.random(a)); // eg. 3\n  //  * console.log(a.random()); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.random(a)); // eg. {type: 'a', value: 1}\n  //  * console.log(a.random()); // same as above\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1, weight: 3},\n  //  *   {type: 'b', value: 2, weight: 5},\n  //  *   {type: 'c', value: 3, weight: 1},\n  //  *   {type: 'd', value: 4, weight: 1},\n  //  * ];\n  //  *\n  //  * console.log(Array.random(a, 'weight')); // eg. {type: 'b', value: 2}\n  //  * console.log(a.random('weight')); // same as above\n  //  *\n  //  * console.log(Array.random(a, 'weight', 'value')); // eg. 2\n  //  * console.log(a.random('weight', 'value')); // same as above\n  //  * @memberOf array\n  //  * @method random\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string} [weightField=null]\n  //  * @param {string} [valueField=null]\n  //  * @return {any|null}\n  //  */\n  // random(a, weightField = null, valueField = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.random.call(a, weightField, valueField);\n  //   }\n\n  //   return null;\n  // },\n\n  // /**\n  //  * executes an iteratee n times as the array length, the iteratee will be invoked with tree arguments item, index, array\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * Array.each(a, function(item, index) {\n  //  *   console.log(item.type);\n  //  * });\n  //  *\n  //  * // it logs\n  //  * // 'a'\n  //  * // 'b'\n  //  * // 'c'\n  //  * // 'd'\n  //  *\n  //  * Array.each(a, function(item, index) {\n  //  *   console.log(item.type);\n  //  * }, true);\n  //  *\n  //  * // it logs\n  //  * // 'd'\n  //  * // 'c'\n  //  * // 'b'\n  //  * // 'a'\n  //  * @memberOf array\n  //  * @method each\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {function} iteratee\n  //  * @param {boolean} [reverse=false] - true if you want to do a reverse cycle\n  //  * @return {array}\n  //  */\n  // each(a, iteratee, reverse = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.each.call(a, iteratee, reverse);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns the first item in an array, with optional propName/propValue pair or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.first(a)); // {type: 'a', value: 1}\n  //  * console.log(a.first())); // {type: 'a', value: 1}\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.first(a, 'type', 'b')); // {type: 'b', value: 1}\n  //  * console.log(a.first('type', 'b'))); // {type: 'b', value: 1}\n  //  * @memberOf array\n  //  * @method first\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {string} [propName=null] - optional, combined with propValue filters the array before extracting the first item<br>\n  //  * or you can specify an optional function as predicate to customize the filter\n  //  * @param {string} [propValue=null] - optional, combined with propName filters the array before extracting the first item\n  //  * @return {any}\n  //  */\n  // first(a, propName = null, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.first.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns the last item in an array, with optional propName/propValue pair or predicate\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.last(a)); // {type: 'd', value: 4}\n  //  * console.log(a.last())); // {type: 'd', value: 4}\n  //  *\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 2},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.last(a, 'type', 'a')); // {type: 'a', value: 2}\n  //  * console.log(a.last('type', 'a'))); // {type: 'a', value: 2}\n  //  * @memberOf array\n  //  * @method last\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {string|function} [propName=null] - optional, combined with propValue filters the array before extracting the last item<br>\n  //  * or you can specify an optional function as predicate to customize the filter\n  //  * @param {string} [propValue=null] - optional, combined with propName filters the array before extracting the last item\n  //  * @return {any}\n  //  */\n  // last(a, propName = null, propValue = null) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.last.call(a, propName, propValue);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * sums a collection by predicate or propName\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 2},\n  //  *   {type: 'c', value: 3},\n  //  *   {type: 'd', value: 4},\n  //  * ];\n  //  *\n  //  * console.log(Array.sum(a, 'value', 0)); // 4 + 3 + 2 + 1 = 10\n  //  * console.log(a.sum('value', 0))); // same as above\n  //  *\n  //  * console.log(Array.sum(a, 'type', '')); // abcd\n  //  * console.log(a.sum('type', ''))); // same as above\n  //  *\n  //  * console.log(Array.sum(a, function(acc, item) {\n  //  *   return acc + item.value;\n  //  * }, 0)); // 4 + 3 + 2 + 1 = 10\n  //  *\n  //  * console.log(a.sum(function(acc, item) {\n  //  *   return acc + item.value;\n  //  * }, 0)); // same as above\n  //  * @memberOf array\n  //  * @method sum\n  //  * @instance\n  //  * @param {array} a\n  //  * @param {function|string} predicate - the predicate should look like this in ES5<br>\n  //  * <pre>\n  //  * function(acc, item) {\n  //  *   return acc + item[propName];\n  //  * }\n  //  * </pre>\n  //  * or in ES6<br>\n  //  * <pre>\n  //  * (acc, item) => {\n  //  *   return acc + item[propName];\n  //  * }\n  //  * </pre><br>\n  //  * this kind of predicate will be implemented automatically if you specify a propName instead the predicate\n  //  * @param {object|any} predicate.acc - the accumulator variable used for the sum\n  //  * @param {object|any} predicate.item - the iterating item\n  //  * @param {any} [startValue=0]\n  //  * @return {any}\n  //  */\n  // sum(a, propName, startValue = 0) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.sum.call(a, propName, startValue);\n  //   }\n\n  //   return a;\n  // },\n  // /**\n  //  * deeply maps a recursive tree structure with (same structure) childrenPropName or 'children' property<br><br>\n  //  * {@link lodash#deepMap|for examples see lodash.deepMap}\n  //  * @memberOf array\n  //  * @method deepMap\n  //  * @instance\n  //  * @param {array|object} a - the array to use for the deep mapping\n  //  * @param {string} [childrenPropName='children'] - the property name to use for children collection\n  //  * @param {function} iteratee - the item mapping iteratee\n  //  */\n  // deepMap(a, childrenPropName = 'children', iteratee) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.deepMap.call(a, childrenPropName, iteratee);\n  //   }\n\n  //   return a;\n  // },\n  // /**\n  //  * loremizes an array\n  //  * @example <caption>eg. usage</caption>\n  //  * console.log(Array.lorem(5)); // [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.lorem(5, 1)); // [1, 1, 1, 1, 1];\n  //  *\n  //  * console.log(Array.lorem(5, '1')); // ['1', '1', '1', '1', '1'];\n  //  *\n  //  * console.log(Array.lorem(5, {type: 'a', value: 1}));\n  //  * // it logs\n  //  * [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 1}\n  //  * ];\n  //  *\n  //  * console.log(Array.lorem(5, function(index) {\n  //  *   return {\n  //  *     type: 'a',\n  //  *     value: index,\n  //  *   };\n  //  * });\n  //  * // it logs\n  //  * [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'a', value: 2},\n  //  *   {type: 'a', value: 3},\n  //  *   {type: 'a', value: 4},\n  //  *   {type: 'a', value: 5}\n  //  * ];\n  //  *\n  //  * @memberOf array\n  //  * @method lorem\n  //  * @instance\n  //  * @param {number} items\n  //  * @param {function|object} [model=false]\n  //  * @return {array}\n  //  */\n  // lorem(items, model = false) {\n  //   return Array.prototype.lorem.call(items, model);\n  // },\n\n  // /**\n  //  * flattens array a single level deep,<br>\n  //  * or with deep parameter (true boolean) recursively flattens array,<br>\n  //  * or with deep parameter (number) you specify the recursion depth\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, [2, [3, [4]], 5]];\n  //  *\n  //  * console.log(Array.flatten(a)); // [1, 2, [3, [4]], 5]\n  //  * console.log(Array.flatten(a, 1)); // same as above\n  //  * console.log(a.flatten()); // same as above\n  //  * console.log(a.flatten(1)); // same as above\n  //  *\n  //  * console.log(Array.flatten(a, true)); // [1, 2, 3, 4, 5]\n  //  * console.log(a.flatten(true)); // same as above\n  //  *\n  //  * console.log(Array.flatten(a, 2)); // [1, 2, 3, [4], 5]\n  //  * console.log(a.flatten(2)); // same as above\n  //  *\n  //  * console.log(Array.flatten(a, 3)); // [1, 2, 3, 4, 5]\n  //  * console.log(a.flatten(3)); // same as above\n  //  * @memberOf array\n  //  * @method flatten\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {boolean|number} [deep=false] - the deep (boolean) or depth (number) parameter specifies to do a full recursion or the recursion depth\n  //  * @return {array}\n  //  */\n  // flatten(a, deep = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.flatten.call(a, deep);\n  //   }\n\n  //   return a;\n  // },\n  // /**\n  //  * creates an array of shuffled values, using a version of the Fisher-Yates shuffle. (from lodash documentation)\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.shuffle(a)); // [4, 3, 5, 1, 2]\n  //  * console.log(a.shuffle()); // same as above (or another randomization ;-)\n  //  * @memberOf array\n  //  * @method shuffle\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // shuffle(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.shuffle.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * splits an array in n-pieces chunks\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.split(a)); // []\n  //  * console.log(a.split()); // same as above\n  //  *\n  //  * console.log(Array.split(a, 1)); // [[1], [2], [3], [4], [5]]\n  //  * console.log(a.split(1)); // same as above\n  //  *\n  //  * console.log(Array.split(a, 2)); // [[1, 2], [3, 4], [5]]\n  //  * console.log(a.split(2)); // same as above\n  //  *\n  //  * console.log(Array.split(a, 3)); // [[1, 2, 3], [4, 5]]\n  //  * console.log(a.split(3)); // same as above\n  //  * @memberOf array\n  //  * @method split\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {number} [n=0] - the n pieces of chunks you want\n  //  * @return {array}\n  //  */\n  // split(a, n = 0) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.split.call(a, n);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * reverses an array, with optional clone parameter to avoid original array mutation\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.reverse(a)); // [5, 4, 3, 2, 1]\n  //  * console.log(a.reverse()); // same as above\n  //  *\n  //  * console.log(a === [5, 4, 3, 2, 1]); // true\n  //  *\n  //  * var b = Array.reverse(a, true); // or var b = a.reverse(true);\n  //  *\n  //  * console.log(a); // [1, 2, 3, 4, 5]\n  //  * console.log(b); // [5, 4, 3, 2, 1]\n  //  * @memberOf array\n  //  * @method tail\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @param {boolean} [clone=false]\n  //  * @return {array}\n  //  */\n  // reverse(a, clone = false) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.reverse.call(a, clone);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns a sliced array with all elements but the first item\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.tail(a)); // [2, 3, 4, 5]\n  //  * console.log(a.tail()); // same as above\n  //  * @memberOf array\n  //  * @method tail\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // tail(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.tail.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * returns a sliced array with all elements but the last item\n  //  * @example <caption>eg. usage</caption>\n  //  * var a = [1, 2, 3, 4, 5];\n  //  *\n  //  * console.log(Array.cut(a)); // [1, 2, 3, 4]\n  //  * console.log(a.cut()); // same as above\n  //  * @memberOf array\n  //  * @method cut\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // cut(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.cut.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * clones an array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 8},\n  //  *   {type: 'c', value: 5},\n  //  *   {type: 'd', value: 7},\n  //  *   {type: 'e', value: 9},\n  //  *   {type: 'f', value: 3},\n  //  * ];\n  //  *\n  //  * var clone = Array.clone(collection); // or var clone = collection.clone();\n  //  *\n  //  * console.log(collection === clone); // false;\n  //  * @memberOf array\n  //  * @method clone\n  //  * @instance\n  //  * @param {array} a - the array\n  //  * @return {array}\n  //  */\n  // clone(a) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.clone.call(a);\n  //   }\n\n  //   return a;\n  // },\n\n  // /**\n  //  * finds max value by propName in a collection array\n  //  * @example <caption>eg. usage</caption>\n  //  * var collection = [\n  //  *   {type: 'a', value: 1},\n  //  *   {type: 'b', value: 8},\n  //  *   {type: 'c', value: 5},\n  //  *   {type: 'd', value: 7},\n  //  *   {type: 'e', value: 9},\n  //  *   {type: 'f', value: 3},\n  //  * ];\n  //  *\n  //  * console.log(Array.maxBy(a, 'value')); // {type:'e', value: 9}\n  //  * console.log(Array.maxBy(a, 'type')); // {type:'f', value: 3}\n  //  *\n  //  * console.log(a.maxBy('value')); // {type:'e', value: 9}\n  //  * console.log(a.maxBy('type')); // {type:'f', value: 3}\n  //  * @memberOf array\n  //  * @method maxBy\n  //  * @instance\n  //  * @param {array} a - the array to check for max value\n  //  * @param {string} [propName=null] - the property name to use for comparation\n  //  * @return {object}\n  //  */\n  // maxBy(a, propName) {\n  //   if (Array.isArray(a)) {\n  //     return Array.prototype.maxBy.call(a, propName);\n  //   }\n\n  //   return a;\n  // },\n};\n","/**\n * @namespace array\n * @description extensions for the JS primitive Array\n */\nimport prototype from './prototype';\nimport native from './native';\n\nexport {\n  prototype,\n  native,\n};\n\nexport default {\n  prototype,\n  native,\n};\n","import ObjectExt from './Object/index';\nimport FunctionExt from './Function/index';\nimport BooleanExt from './Boolean/index';\nimport NumberExt from './Number/index';\nimport DateExt from './Date/index';\nimport StringExt from './String/index';\nimport ArrayExt from './Array/index';\n\nexport default {\n  Object: ObjectExt,\n  Function: FunctionExt,\n  Boolean: BooleanExt,\n  Number: NumberExt,\n  Date: DateExt,\n  String: StringExt,\n  Array: ArrayExt,\n};\n","import './Core/index';\nimport Extensions from './Extensions/index';\n\n/**\n * constructs Flavor class & extends the js natives\n * @class Flavor\n * @classdesc Flavor the definitive JS natives chainable extensions methods\n * @public\n */\nexport default class Flavor {\n  constructor() {\n    this.init();\n  }\n\n  /**\n   * safe js native prototype extension using Object.defineProperty\n   * @memberOf Flavor\n   * @method extendProp\n   * @instance\n   * @param {prototype|object} target - the prototype/object to extend\n   * @param {string} prop - the name of the property to be defined or modified\n   * @param {*} val - val to be used as value in the descriptor for the property, can be any kind of native (number, function, etc...) or what you want\n   * @param {object} [options={}] - options to be used as parameters in the descriptor for the property<br>\n   * possible options are (source documentation from <a href=\"https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/object/defineProperty\" target=\"_blank\">Javascript|MDN docs</a>)<br>\n   * @param {boolean} [options.configurable=true] configurable - true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding Object.\n   * @param {boolean} [options.enumerable=false] enumerable - true if and only if this property shows up during enumeration of the properties on the corresponding Object.\n   * @param {boolean} [options.writable=true] writable - true if and only if the value associated with the property may be changed with an assignment operator.\n   * @param {function} [options.get=undefined] get - A function which serves as a getter for the property, or undefined if there is no getter. The function return will be used as the value of property.<br>\n   * for example...<br>\n   * <pre>\n   * function ClassName() {\n   *   var privateProp = null;\n   *\n   *   Object.defineProperty(this, 'publicProp', {\n   *     get: function() {\n   *       return privateProp;\n   *     }\n   *   });\n   * }\n   * </pre>\n   * @param {function} [options.set=undefined] set - A function which serves as a setter for the property, or undefined if there is no setter. The function will receive as only argument the new value being assigned to the property.<br>\n   * for example...<br>\n   * <pre>\n   * function ClassName() {\n   *   var privateProp = null;\n   *\n   *   Object.defineProperty(this, 'publicProp', {\n   *     set: function(value) {\n   *       privateProp = value;\n   *     }\n   *   });\n   * }\n   * </pre>\n   */\n  extendProp(target, prop, val, options = {}) {\n    Object.defineProperty(target, prop, {\n      value: val,\n      writable: options.writable || true,\n      configurable: options.configurable || true,\n      enumerable: options.enumerable || false,\n    });\n  }\n\n  /**\n   * merges all keys in extend plain object to the prototype (\n   * @memberOf Flavor\n   * @method extendProps\n   * @instance\n   * @param {prototype|object} target - the prototype/object to extend\n   * @param {object} extensions - the extend object to be merged in prototype\n   */\n  extendProps(target, extensions) {\n    Object.defineProperties(target, extensions);\n  }\n\n  /**\n   * extendObject\n   * @memberOf Flavor\n   * @method extendObject\n   * @instance\n   */\n  extendObject() {\n    this.extendProps(Object.prototype, Extensions.Object.prototype);\n    this.extendProps(Object, Extensions.Object.native);\n  }\n\n  /**\n   * extendFunction\n   * @memberOf Flavor\n   * @method extendFunction\n   * @instance\n   */\n  extendFunction() {\n    this.extendProps(Function.prototype, Extensions.Function.prototype);\n    this.extendProps(Function, Extensions.Function.native);\n  }\n\n  /**\n   * extendBoolean\n   * @memberOf Flavor\n   * @method extendBoolean\n   * @instance\n   */\n  extendBoolean() {\n    this.extendProps(Boolean.prototype, Extensions.Boolean.prototype);\n    this.extendProps(Boolean, Extensions.Boolean.native);\n  }\n\n  /**\n   * extendNumber\n   * @memberOf Flavor\n   * @method extendNumber\n   * @instance\n   */\n  extendNumber() {\n    this.extendProps(Number.prototype, Extensions.Number.prototype);\n    this.extendProps(Number, Extensions.Number.native);\n  }\n\n  /**\n   * extendDate\n   * @memberOf Flavor\n   * @method extendDate\n   * @instance\n   */\n  extendDate() {\n    this.extendProps(Date.prototype, Extensions.Date.prototype);\n    this.extendProps(Date, Extensions.Date.native);\n  }\n\n  /**\n   * extendString\n   * @memberOf Flavor\n   * @method extendString\n   * @instance\n   */\n  extendString() {\n    this.extendProps(String.prototype, Extensions.String.prototype);\n    this.extendProps(String, Extensions.String.native);\n  }\n\n  /**\n   * extendArray\n   * @memberOf Flavor\n   * @method extendArray\n   * @instance\n   */\n  extendArray() {\n    this.extendProps(Array.prototype, Extensions.Array.prototype);\n    this.extendProps(Array, Extensions.Array.native);\n  }\n\n  /**\n   * initialize all\n   * @memberOf Flavor\n   * @method init\n   * @instance\n   */\n  init() {\n    this.extendObject();\n    this.extendFunction();\n    this.extendBoolean();\n    this.extendNumber();\n    this.extendDate();\n    this.extendString();\n    this.extendArray();\n\n    console.warn('FlavorJS initialized');\n  }\n}\n","/*global Window*/\n\n// const flavorInitialized = (!!window && window instanceof Window && !!window.Flavor && !!window.Æ’);\n\n// const flavor = flavorInitialized ? window.Flavor : new Flavor();\n\n// window.Flavor = Flavor;\n// window.Æ’ = Flavor;\nimport Flavor from './Flavor';\n\nexport default Flavor;\n"],"names":["Object","entries","defineProperty","configurable","enumerable","writable","value","obj","ownProps","keys","i","length","resArray","Array","hasOwnProperty","Reflect","ownKeys","reduce","descriptors","key","getOwnPropertyDescriptor","assign","target","firstSource","undefined","TypeError","to","arguments","nextSource","keysArray","nextIndex","len","nextKey","desc","convertToDescriptor","descriptor","prototype","call","getter","get","setter","set","defineProperties","properties","forEach","property","trueTypeOf","toString","slice","toLowerCase","isArray","arr","filter","f","t","fun","res","thisArg","val","push","map","iterator","result","includes","valueToFind","fromIndex","o","n","k","Math","max","abs","sameValueZero","x","y","isNaN","callback","String","search","start","indexOf","toCamelCase","s","match","toUpperCase","join","native","isBoolean","b","random","difference","symmetric","unique","item","arr1","arr2","ObjectExt","Function","FunctionExt","Boolean","BooleanExt","Number","NumberExt","Date","DateExt","StringExt","ArrayExt","Flavor","init","prop","options","extensions","extendProps","Extensions","extendProps","extendObject","extendFunction","extendBoolean","extendNumber","extendDate","extendString","extendArray","console","warn"],"mappings":"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"}
